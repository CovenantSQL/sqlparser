//line sql.y:19
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:19
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:54
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	joinCondition     JoinCondition
	tableName         TableName
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	setExprs          SetExprs
	updateExpr        *UpdateExpr
	setExpr           *SetExpr
	colIdent          ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const ALL = 57360
const DISTINCT = 57361
const AS = 57362
const EXISTS = 57363
const ASC = 57364
const DESC = 57365
const INTO = 57366
const KEY = 57367
const DEFAULT = 57368
const SET = 57369
const VALUES = 57370
const LAST_INSERT_ID = 57371
const JOIN = 57372
const LEFT = 57373
const RIGHT = 57374
const INNER = 57375
const OUTER = 57376
const CROSS = 57377
const NATURAL = 57378
const ON = 57379
const USING = 57380
const ID = 57381
const HEX = 57382
const STRING = 57383
const INTEGRAL = 57384
const FLOAT = 57385
const HEXNUM = 57386
const VALUE_ARG = 57387
const LIST_ARG = 57388
const COMMENT = 57389
const NULL = 57390
const TRUE = 57391
const FALSE = 57392
const OR = 57393
const AND = 57394
const NOT = 57395
const BETWEEN = 57396
const CASE = 57397
const WHEN = 57398
const THEN = 57399
const ELSE = 57400
const END = 57401
const LE = 57402
const GE = 57403
const NE = 57404
const IS = 57405
const LIKE = 57406
const REGEXP = 57407
const IN = 57408
const NULL_SAFE_NOTEQUAL = 57409
const SHIFT_LEFT = 57410
const SHIFT_RIGHT = 57411
const DIV = 57412
const MOD = 57413
const UNARY = 57414
const INTERVAL = 57415
const CREATE = 57416
const ALTER = 57417
const DROP = 57418
const RENAME = 57419
const ADD = 57420
const TABLE = 57421
const INDEX = 57422
const TO = 57423
const IGNORE = 57424
const IF = 57425
const UNIQUE = 57426
const PRIMARY = 57427
const COLUMN = 57428
const CONSTRAINT = 57429
const FOREIGN = 57430
const SHOW = 57431
const DESCRIBE = 57432
const DATE = 57433
const ESCAPE = 57434
const TINYINT = 57435
const SMALLINT = 57436
const MEDIUMINT = 57437
const INT = 57438
const INTEGER = 57439
const BIGINT = 57440
const INTNUM = 57441
const REAL = 57442
const DOUBLE = 57443
const FLOAT_TYPE = 57444
const DECIMAL = 57445
const NUMERIC = 57446
const TIME = 57447
const TIMESTAMP = 57448
const DATETIME = 57449
const YEAR = 57450
const CHAR = 57451
const VARCHAR = 57452
const BOOL = 57453
const NCHAR = 57454
const TEXT = 57455
const TINYTEXT = 57456
const MEDIUMTEXT = 57457
const LONGTEXT = 57458
const BLOB = 57459
const TINYBLOB = 57460
const MEDIUMBLOB = 57461
const LONGBLOB = 57462
const AUTO_INCREMENT = 57463
const SIGNED = 57464
const UNSIGNED = 57465
const ZEROFILL = 57466
const TABLES = 57467
const CURRENT_TIMESTAMP = 57468
const CURRENT_DATE = 57469
const CURRENT_TIME = 57470
const REPLACE = 57471
const CAST = 57472
const SUBSTR = 57473
const GROUP_CONCAT = 57474
const SEPARATOR = 57475
const UNUSED = 57476

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"KEY",
	"DEFAULT",
	"SET",
	"VALUES",
	"LAST_INSERT_ID",
	"JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"NULL_SAFE_NOTEQUAL",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"INTERVAL",
	"'.'",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ADD",
	"TABLE",
	"INDEX",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"FOREIGN",
	"SHOW",
	"DESCRIBE",
	"DATE",
	"ESCAPE",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"AUTO_INCREMENT",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"TABLES",
	"CURRENT_TIMESTAMP",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"REPLACE",
	"CAST",
	"SUBSTR",
	"GROUP_CONCAT",
	"SEPARATOR",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 17,
	-2, 4,
	-1, 109,
	1, 152,
	5, 152,
	11, 152,
	12, 152,
	13, 152,
	14, 152,
	16, 152,
	27, 152,
	30, 152,
	31, 152,
	33, 152,
	35, 152,
	36, 152,
	37, 152,
	38, 152,
	40, 152,
	41, 152,
	152, 152,
	-2, 165,
	-1, 253,
	90, 352,
	-2, 348,
	-1, 254,
	90, 353,
	-2, 349,
	-1, 397,
	5, 17,
	-2, 321,
	-1, 513,
	90, 355,
	-2, 351,
	-1, 545,
	5, 18,
	-2, 224,
	-1, 603,
	5, 18,
	-2, 322,
	-1, 666,
	5, 17,
	-2, 324,
	-1, 723,
	5, 18,
	-2, 325,
}

const yyPrivate = 57344

const yyLast = 4044

var yyAct = [...]int{

	254, 212, 376, 207, 617, 238, 528, 529, 427, 455,
	31, 444, 508, 581, 426, 127, 401, 277, 3, 46,
	520, 217, 510, 240, 44, 512, 483, 131, 276, 468,
	330, 205, 94, 117, 540, 436, 423, 400, 114, 460,
	280, 267, 106, 93, 451, 30, 706, 256, 105, 560,
	24, 26, 15, 16, 443, 622, 623, 624, 86, 332,
	621, 111, 625, 88, 87, 696, 104, 22, 694, 347,
	346, 356, 357, 349, 350, 351, 352, 353, 354, 355,
	348, 438, 129, 28, 114, 461, 124, 462, 46, 46,
	46, 678, 461, 130, 130, 130, 121, 438, 118, 102,
	632, 119, 114, 582, 203, 204, 84, 85, 258, 89,
	126, 114, 114, 83, 554, 710, 114, 259, 324, 323,
	635, 114, 606, 588, 114, 538, 114, 46, 472, 375,
	284, 348, 130, 490, 334, 18, 19, 20, 336, 440,
	537, 123, 328, 661, 441, 122, 488, 489, 487, 336,
	21, 23, 521, 437, 626, 209, 257, 435, 434, 322,
	335, 334, 219, 262, 521, 658, 595, 679, 677, 437,
	351, 352, 353, 354, 355, 348, 336, 285, 476, 478,
	479, 558, 321, 477, 263, 325, 681, 327, 680, 563,
	27, 562, 304, 561, 309, 310, 311, 312, 313, 314,
	109, 315, 316, 317, 318, 319, 305, 306, 307, 308,
	294, 295, 722, 619, 296, 297, 298, 299, 300, 301,
	302, 303, 369, 370, 371, 372, 373, 125, 329, 645,
	28, 654, 655, 656, 653, 118, 657, 574, 575, 576,
	486, 647, 555, 650, 652, 646, 506, 644, 320, 590,
	648, 349, 350, 351, 352, 353, 354, 355, 348, 208,
	649, 651, 114, 393, 711, 712, 114, 114, 114, 114,
	403, 339, 717, 109, 716, 114, 674, 673, 397, 114,
	416, 417, 114, 335, 334, 114, 402, 46, 335, 334,
	338, 392, 130, 390, 391, 663, 418, 465, 208, 336,
	627, 377, 630, 629, 336, 383, 446, 447, 514, 406,
	420, 408, 422, 337, 405, 414, 407, 448, 449, 450,
	601, 431, 419, 399, 265, 335, 334, 335, 334, 457,
	605, 208, 628, 46, 514, 208, 265, 208, 470, 287,
	286, 336, 482, 336, 32, 491, 492, 493, 494, 495,
	496, 497, 498, 499, 500, 501, 502, 503, 504, 505,
	24, 453, 454, 424, 463, 484, 536, 24, 591, 428,
	465, 264, 465, 548, 46, 466, 388, 367, 24, 507,
	515, 130, 665, 544, 265, 28, 403, 445, 395, 396,
	403, 715, 536, 28, 473, 474, 418, 480, 481, 46,
	28, 403, 517, 513, 534, 465, 522, 456, 523, 524,
	525, 28, 612, 518, 551, 452, 532, 402, 269, 272,
	530, 270, 545, 271, 273, 541, 542, 46, 109, 109,
	109, 109, 130, 527, 546, 549, 526, 535, 377, 516,
	40, 109, 543, 458, 269, 272, 12, 270, 257, 271,
	273, 411, 541, 542, 410, 412, 413, 272, 511, 114,
	409, 557, 714, 114, 552, 90, 459, 114, 326, 403,
	46, 553, 275, 206, 100, 470, 95, 685, 130, 96,
	98, 32, 684, 634, 547, 567, 424, 241, 25, 91,
	578, 579, 580, 115, 565, 570, 569, 34, 573, 571,
	513, 568, 36, 29, 485, 1, 35, 616, 433, 428,
	584, 484, 585, 25, 577, 425, 116, 39, 432, 676,
	564, 99, 37, 38, 566, 110, 597, 598, 599, 600,
	620, 92, 586, 439, 559, 602, 603, 604, 442, 556,
	594, 592, 403, 290, 130, 291, 607, 289, 293, 46,
	292, 46, 46, 608, 130, 511, 130, 618, 402, 615,
	288, 643, 274, 614, 279, 46, 513, 467, 41, 120,
	130, 365, 101, 671, 589, 128, 128, 128, 533, 613,
	631, 596, 389, 255, 638, 639, 683, 25, 633, 46,
	640, 377, 636, 659, 130, 593, 382, 609, 278, 519,
	641, 611, 218, 660, 475, 228, 46, 46, 225, 664,
	227, 668, 669, 46, 128, 46, 226, 215, 672, 394,
	130, 610, 666, 549, 340, 530, 216, 210, 108, 109,
	675, 428, 260, 428, 268, 266, 46, 539, 403, 687,
	670, 130, 107, 464, 705, 688, 14, 689, 33, 239,
	485, 103, 11, 10, 682, 662, 690, 692, 691, 17,
	693, 9, 695, 703, 697, 698, 699, 700, 701, 702,
	8, 642, 708, 7, 6, 46, 5, 4, 97, 713,
	618, 13, 2, 0, 0, 709, 0, 112, 719, 530,
	0, 0, 0, 0, 0, 0, 0, 428, 0, 0,
	0, 366, 368, 0, 0, 0, 720, 0, 0, 721,
	0, 46, 46, 723, 0, 0, 724, 725, 642, 0,
	0, 0, 0, 707, 726, 67, 374, 0, 0, 378,
	379, 380, 381, 112, 384, 0, 0, 59, 385, 386,
	387, 0, 0, 0, 718, 377, 0, 0, 398, 0,
	45, 112, 0, 110, 110, 110, 110, 0, 0, 0,
	112, 282, 704, 208, 0, 112, 278, 0, 0, 0,
	112, 0, 0, 112, 0, 112, 0, 0, 0, 0,
	0, 0, 0, 347, 346, 356, 357, 349, 350, 351,
	352, 353, 354, 355, 348, 0, 0, 347, 346, 356,
	357, 349, 350, 351, 352, 353, 354, 355, 348, 0,
	68, 0, 0, 56, 0, 0, 51, 0, 76, 71,
	63, 57, 58, 47, 0, 69, 54, 55, 53, 66,
	73, 74, 52, 81, 50, 80, 49, 65, 72, 77,
	64, 61, 48, 75, 62, 60, 0, 70, 78, 82,
	0, 0, 0, 0, 0, 333, 25, 0, 0, 79,
	0, 0, 0, 0, 0, 0, 378, 67, 0, 0,
	469, 0, 0, 0, 0, 0, 0, 0, 0, 59,
	0, 0, 0, 0, 531, 0, 25, 0, 0, 0,
	0, 0, 45, 0, 471, 0, 0, 0, 0, 0,
	0, 208, 0, 0, 335, 334, 0, 0, 0, 0,
	0, 112, 0, 0, 404, 112, 112, 112, 112, 0,
	336, 0, 0, 0, 415, 0, 0, 0, 112, 0,
	0, 282, 0, 0, 421, 347, 346, 356, 357, 349,
	350, 351, 352, 353, 354, 355, 348, 0, 0, 0,
	0, 0, 68, 0, 110, 56, 0, 0, 51, 0,
	76, 71, 63, 57, 58, 47, 0, 69, 54, 55,
	53, 66, 73, 74, 52, 81, 50, 80, 49, 65,
	72, 77, 64, 61, 48, 75, 62, 60, 637, 70,
	78, 82, 0, 0, 0, 0, 0, 0, 0, 587,
	0, 79, 0, 0, 0, 0, 0, 0, 347, 346,
	356, 357, 349, 350, 351, 352, 353, 354, 355, 348,
	0, 0, 0, 0, 333, 421, 0, 0, 0, 0,
	404, 0, 0, 0, 404, 333, 333, 333, 342, 0,
	345, 0, 0, 0, 0, 404, 358, 359, 360, 361,
	362, 363, 128, 343, 344, 341, 364, 347, 346, 356,
	357, 349, 350, 351, 352, 353, 354, 355, 348, 0,
	0, 0, 0, 583, 347, 346, 356, 357, 349, 350,
	351, 352, 353, 354, 355, 348, 0, 0, 0, 531,
	0, 0, 667, 347, 346, 356, 357, 349, 350, 351,
	352, 353, 354, 355, 348, 0, 0, 0, 112, 0,
	0, 0, 112, 404, 0, 333, 112, 0, 0, 0,
	0, 0, 421, 346, 356, 357, 349, 350, 351, 352,
	353, 354, 355, 348, 356, 357, 349, 350, 351, 352,
	353, 354, 355, 348, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 531, 0, 25, 0, 0, 0, 333,
	0, 0, 0, 0, 0, 0, 0, 0, 333, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 404, 0, 421, 0,
	0, 0, 0, 0, 0, 196, 187, 166, 198, 147,
	158, 202, 159, 160, 181, 138, 174, 67, 0, 150,
	134, 156, 135, 148, 168, 171, 146, 189, 200, 59,
	170, 172, 186, 165, 182, 141, 176, 179, 199, 0,
	0, 0, 45, 0, 429, 430, 0, 333, 0, 0,
	0, 178, 195, 157, 180, 133, 177, 0, 137, 139,
	201, 193, 153, 154, 550, 0, 0, 0, 0, 0,
	169, 173, 183, 163, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 151, 0, 175, 0, 0, 0, 167,
	0, 140, 404, 152, 184, 132, 191, 164, 194, 162,
	161, 197, 68, 0, 0, 56, 190, 149, 51, 155,
	76, 71, 63, 57, 58, 47, 0, 69, 54, 55,
	53, 66, 73, 74, 52, 81, 50, 80, 49, 65,
	72, 77, 64, 61, 48, 75, 62, 60, 136, 70,
	78, 82, 192, 144, 142, 143, 185, 0, 145, 0,
	188, 79, 196, 187, 166, 198, 147, 158, 202, 159,
	160, 181, 138, 174, 67, 0, 150, 134, 156, 135,
	148, 168, 171, 146, 189, 200, 59, 170, 172, 186,
	165, 182, 141, 176, 179, 199, 0, 0, 0, 45,
	0, 429, 430, 0, 0, 0, 0, 0, 178, 195,
	157, 180, 133, 177, 0, 137, 139, 201, 193, 153,
	154, 0, 0, 0, 0, 0, 0, 169, 173, 183,
	163, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	151, 0, 175, 0, 0, 0, 167, 0, 140, 0,
	152, 184, 132, 191, 164, 194, 162, 161, 197, 68,
	0, 0, 56, 190, 149, 51, 155, 76, 71, 63,
	57, 58, 47, 0, 69, 54, 55, 53, 66, 73,
	74, 52, 81, 50, 80, 49, 65, 72, 77, 64,
	61, 48, 75, 62, 60, 136, 70, 78, 82, 192,
	144, 142, 143, 185, 0, 145, 0, 188, 79, 196,
	187, 166, 198, 147, 158, 202, 159, 160, 181, 138,
	174, 67, 0, 150, 134, 156, 135, 148, 168, 171,
	146, 189, 200, 59, 170, 172, 186, 165, 182, 141,
	176, 179, 199, 0, 0, 0, 45, 0, 0, 0,
	0, 0, 0, 0, 0, 178, 195, 157, 180, 133,
	177, 0, 137, 139, 201, 193, 153, 154, 0, 0,
	0, 0, 0, 0, 169, 173, 183, 163, 0, 0,
	0, 0, 0, 0, 0, 686, 0, 151, 0, 175,
	0, 0, 0, 167, 0, 140, 0, 152, 184, 132,
	191, 164, 194, 162, 161, 197, 68, 0, 0, 56,
	190, 149, 51, 155, 76, 71, 63, 57, 58, 47,
	0, 69, 54, 55, 53, 66, 73, 74, 52, 81,
	50, 80, 49, 65, 72, 77, 64, 61, 48, 75,
	62, 60, 136, 70, 78, 82, 192, 144, 142, 143,
	185, 0, 145, 0, 188, 79, 196, 187, 166, 198,
	147, 158, 202, 159, 160, 181, 138, 174, 67, 0,
	150, 134, 156, 135, 148, 168, 171, 146, 189, 200,
	59, 170, 172, 186, 165, 182, 141, 176, 179, 199,
	28, 0, 0, 45, 0, 0, 0, 0, 0, 0,
	0, 0, 178, 195, 157, 180, 133, 177, 0, 137,
	139, 201, 193, 153, 154, 0, 0, 0, 0, 0,
	0, 169, 173, 183, 163, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 151, 0, 175, 0, 0, 0,
	167, 0, 140, 0, 152, 184, 132, 191, 164, 194,
	162, 161, 197, 68, 0, 0, 56, 190, 149, 51,
	155, 76, 71, 63, 57, 58, 47, 0, 69, 54,
	55, 53, 66, 73, 74, 52, 81, 50, 80, 49,
	65, 72, 77, 64, 61, 48, 75, 62, 60, 136,
	70, 78, 82, 192, 144, 142, 143, 185, 0, 145,
	0, 188, 79, 196, 187, 166, 198, 147, 158, 202,
	159, 160, 181, 138, 174, 67, 0, 150, 134, 156,
	135, 148, 168, 171, 146, 189, 200, 59, 170, 172,
	186, 165, 182, 141, 176, 179, 199, 0, 0, 0,
	253, 0, 0, 0, 0, 0, 0, 0, 0, 178,
	195, 157, 180, 133, 177, 0, 137, 139, 201, 193,
	153, 154, 0, 0, 0, 0, 0, 0, 169, 173,
	183, 163, 0, 0, 0, 0, 0, 0, 0, 572,
	0, 151, 0, 175, 0, 0, 0, 167, 0, 140,
	0, 152, 184, 132, 191, 164, 194, 162, 161, 197,
	68, 0, 0, 56, 190, 149, 51, 155, 76, 71,
	63, 57, 58, 47, 0, 69, 54, 55, 53, 66,
	73, 74, 52, 81, 50, 80, 49, 65, 72, 77,
	64, 61, 48, 75, 62, 60, 136, 70, 78, 82,
	192, 144, 142, 143, 185, 0, 145, 0, 188, 79,
	196, 187, 166, 198, 147, 158, 202, 159, 160, 181,
	138, 174, 67, 0, 150, 134, 156, 135, 148, 168,
	171, 146, 189, 200, 59, 170, 172, 186, 165, 182,
	141, 176, 179, 199, 0, 0, 0, 45, 0, 0,
	0, 0, 0, 0, 0, 0, 178, 195, 157, 180,
	133, 177, 0, 137, 139, 201, 193, 153, 154, 0,
	0, 0, 0, 0, 0, 169, 173, 183, 163, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 151, 0,
	175, 0, 0, 0, 167, 0, 140, 0, 152, 184,
	132, 191, 164, 194, 162, 161, 197, 68, 0, 0,
	56, 190, 149, 51, 155, 76, 71, 63, 57, 58,
	47, 0, 69, 54, 55, 53, 66, 73, 74, 52,
	81, 50, 80, 49, 65, 72, 77, 64, 61, 48,
	75, 62, 60, 136, 70, 78, 82, 192, 144, 142,
	143, 185, 0, 145, 0, 188, 79, 196, 187, 166,
	198, 147, 158, 202, 159, 160, 181, 138, 174, 67,
	0, 150, 134, 156, 135, 148, 168, 171, 146, 189,
	200, 59, 170, 172, 186, 165, 182, 141, 176, 179,
	199, 0, 0, 0, 253, 0, 0, 0, 0, 0,
	0, 0, 0, 178, 195, 157, 180, 133, 177, 0,
	137, 139, 201, 193, 153, 154, 0, 0, 0, 0,
	0, 0, 169, 173, 183, 163, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 151, 0, 175, 0, 0,
	0, 167, 0, 140, 0, 152, 184, 132, 191, 164,
	194, 162, 161, 197, 68, 0, 0, 56, 190, 149,
	51, 155, 76, 71, 63, 57, 58, 47, 0, 69,
	54, 55, 53, 66, 73, 74, 52, 81, 50, 80,
	49, 65, 72, 77, 64, 61, 48, 75, 62, 60,
	136, 70, 78, 82, 192, 144, 142, 143, 185, 0,
	145, 0, 188, 79, 196, 187, 166, 198, 147, 158,
	202, 159, 160, 181, 138, 174, 67, 0, 150, 134,
	156, 135, 148, 168, 171, 146, 189, 200, 59, 170,
	172, 186, 165, 182, 141, 176, 179, 199, 0, 0,
	0, 113, 0, 0, 0, 0, 0, 0, 0, 0,
	178, 195, 157, 180, 133, 177, 0, 137, 139, 201,
	193, 153, 154, 0, 0, 0, 0, 0, 0, 169,
	173, 183, 163, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 151, 0, 175, 0, 0, 0, 167, 0,
	140, 0, 152, 184, 132, 191, 164, 194, 162, 161,
	197, 68, 0, 0, 56, 190, 149, 51, 155, 76,
	71, 63, 57, 58, 47, 0, 69, 54, 55, 53,
	66, 73, 74, 52, 81, 50, 80, 49, 65, 72,
	77, 64, 61, 48, 75, 62, 60, 136, 70, 78,
	82, 192, 144, 142, 143, 185, 0, 145, 0, 188,
	79, 67, 0, 509, 0, 214, 0, 0, 0, 0,
	213, 0, 246, 59, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 28, 0, 0, 253, 230, 229, 231,
	232, 233, 234, 0, 0, 235, 236, 237, 0, 0,
	211, 223, 0, 245, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 220, 221, 331, 0, 0, 0, 251,
	0, 222, 0, 224, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 250, 0, 68, 0, 0, 56,
	0, 0, 51, 0, 76, 71, 63, 57, 58, 47,
	0, 69, 54, 55, 53, 66, 73, 74, 52, 81,
	50, 80, 49, 65, 72, 77, 64, 61, 48, 75,
	62, 60, 0, 70, 78, 82, 0, 247, 248, 249,
	252, 242, 243, 244, 67, 79, 0, 0, 214, 0,
	0, 0, 0, 213, 0, 246, 59, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 28, 0, 0, 253,
	230, 229, 231, 232, 233, 234, 0, 0, 235, 236,
	237, 0, 0, 211, 223, 0, 245, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 220, 221, 331, 0,
	0, 0, 251, 0, 222, 0, 224, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 250, 0, 68,
	0, 0, 56, 0, 0, 51, 0, 76, 71, 63,
	57, 58, 47, 0, 69, 54, 55, 53, 66, 73,
	74, 52, 81, 50, 80, 49, 65, 72, 77, 64,
	61, 48, 75, 62, 60, 0, 70, 78, 82, 0,
	247, 248, 249, 252, 242, 243, 244, 67, 79, 0,
	0, 214, 0, 0, 0, 0, 213, 0, 246, 59,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 28,
	0, 208, 253, 230, 229, 231, 232, 233, 234, 0,
	0, 235, 236, 237, 0, 0, 211, 223, 0, 245,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 220,
	221, 0, 0, 0, 0, 251, 0, 222, 0, 224,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	250, 0, 68, 0, 0, 56, 0, 0, 51, 0,
	76, 71, 63, 57, 58, 47, 0, 69, 54, 55,
	53, 66, 73, 74, 52, 81, 50, 80, 49, 65,
	72, 77, 64, 61, 48, 75, 62, 60, 0, 70,
	78, 82, 24, 247, 248, 249, 252, 242, 243, 244,
	0, 79, 0, 67, 0, 0, 0, 214, 0, 0,
	0, 0, 213, 0, 246, 59, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 28, 0, 0, 253, 230,
	229, 231, 232, 233, 234, 0, 0, 235, 236, 237,
	0, 0, 211, 223, 0, 245, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 220, 221, 0, 0, 0,
	0, 251, 0, 222, 0, 224, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 250, 0, 68, 0,
	0, 56, 0, 0, 51, 0, 76, 71, 63, 57,
	58, 47, 0, 69, 54, 55, 53, 66, 73, 74,
	52, 81, 50, 80, 49, 65, 72, 77, 64, 61,
	48, 75, 62, 60, 0, 70, 78, 82, 0, 247,
	248, 249, 252, 242, 243, 244, 67, 79, 0, 0,
	214, 0, 0, 0, 0, 213, 0, 246, 59, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 28, 0,
	0, 253, 230, 229, 231, 232, 233, 234, 0, 0,
	235, 236, 237, 0, 0, 211, 223, 0, 245, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 220, 221,
	0, 0, 0, 0, 251, 0, 222, 0, 224, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 250,
	0, 68, 0, 0, 56, 0, 0, 51, 0, 76,
	71, 63, 57, 58, 47, 0, 69, 54, 55, 53,
	66, 73, 74, 52, 81, 50, 80, 49, 65, 72,
	77, 64, 61, 48, 75, 62, 60, 0, 70, 78,
	82, 67, 247, 248, 249, 252, 242, 243, 244, 0,
	79, 0, 246, 59, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 28, 0, 0, 253, 230, 229, 231,
	232, 233, 234, 0, 0, 235, 236, 237, 0, 0,
	0, 223, 24, 245, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 67, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 220, 221, 59, 0, 0, 0, 251,
	0, 222, 0, 224, 0, 28, 0, 0, 45, 0,
	0, 0, 0, 0, 250, 0, 68, 0, 0, 56,
	0, 0, 51, 0, 76, 71, 63, 57, 58, 47,
	0, 69, 54, 55, 53, 66, 73, 74, 52, 81,
	50, 80, 49, 65, 72, 77, 64, 61, 48, 75,
	62, 60, 0, 70, 78, 82, 0, 247, 248, 249,
	252, 242, 243, 244, 0, 79, 0, 0, 68, 0,
	0, 56, 0, 0, 51, 0, 76, 71, 63, 57,
	58, 47, 0, 69, 54, 55, 53, 66, 73, 74,
	52, 81, 50, 80, 49, 65, 72, 77, 64, 61,
	48, 75, 62, 60, 24, 70, 78, 82, 0, 0,
	0, 0, 0, 0, 0, 67, 0, 79, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 59, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 28, 0, 0,
	113, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 67, 0, 0,
	281, 0, 0, 0, 0, 0, 0, 0, 0, 59,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 113, 0, 283, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	68, 0, 0, 56, 0, 0, 51, 0, 76, 71,
	63, 57, 58, 47, 0, 69, 54, 55, 53, 66,
	73, 74, 52, 81, 50, 80, 49, 65, 72, 77,
	64, 61, 48, 75, 62, 60, 0, 70, 78, 82,
	0, 0, 68, 0, 0, 56, 0, 0, 51, 79,
	76, 71, 63, 57, 58, 47, 0, 69, 54, 55,
	53, 66, 73, 74, 52, 81, 50, 80, 49, 65,
	72, 77, 64, 61, 48, 75, 62, 60, 67, 70,
	78, 82, 0, 0, 0, 0, 0, 0, 0, 0,
	59, 79, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 45, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	67, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 59, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 45, 0, 471, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 42, 0, 0,
	0, 0, 43, 68, 0, 0, 56, 0, 0, 51,
	0, 76, 71, 63, 57, 58, 47, 0, 69, 54,
	55, 53, 66, 73, 74, 52, 81, 50, 80, 49,
	65, 72, 77, 64, 61, 48, 75, 62, 60, 0,
	70, 78, 82, 0, 0, 68, 0, 0, 56, 0,
	0, 51, 79, 76, 71, 63, 57, 58, 47, 0,
	69, 54, 55, 53, 66, 73, 74, 52, 81, 50,
	80, 49, 65, 72, 77, 64, 61, 48, 75, 62,
	60, 67, 70, 78, 82, 0, 0, 0, 0, 0,
	0, 0, 0, 59, 79, 0, 0, 0, 0, 0,
	0, 0, 0, 28, 0, 0, 113, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 67, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 59, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 113, 0,
	283, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 68, 0, 0, 56,
	0, 0, 51, 0, 76, 71, 63, 57, 58, 47,
	0, 69, 54, 55, 53, 66, 73, 74, 52, 81,
	50, 80, 49, 65, 72, 77, 64, 61, 48, 75,
	62, 60, 0, 70, 78, 82, 0, 0, 68, 0,
	0, 56, 0, 0, 51, 79, 76, 71, 63, 57,
	58, 47, 0, 69, 54, 55, 53, 66, 73, 74,
	52, 81, 50, 80, 49, 65, 72, 77, 64, 61,
	48, 75, 62, 60, 67, 70, 78, 82, 0, 0,
	0, 261, 0, 0, 0, 0, 59, 79, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 113,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 67, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 59, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 45, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
	0, 0, 56, 0, 0, 51, 0, 76, 71, 63,
	57, 58, 47, 0, 69, 54, 55, 53, 66, 73,
	74, 52, 81, 50, 80, 49, 65, 72, 77, 64,
	61, 48, 75, 62, 60, 0, 70, 78, 82, 0,
	0, 68, 0, 0, 56, 0, 0, 51, 79, 76,
	71, 63, 57, 58, 47, 0, 69, 54, 55, 53,
	66, 73, 74, 52, 81, 50, 80, 49, 65, 72,
	77, 64, 61, 48, 75, 62, 60, 67, 70, 78,
	82, 0, 0, 0, 0, 0, 0, 0, 0, 59,
	79, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 253, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 67,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 59, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 113, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 68, 0, 0, 56, 0, 0, 51, 0,
	76, 71, 63, 57, 58, 47, 0, 69, 54, 55,
	53, 66, 73, 74, 52, 81, 50, 80, 49, 65,
	72, 77, 64, 61, 48, 75, 62, 60, 0, 70,
	78, 82, 0, 0, 68, 0, 0, 56, 0, 0,
	51, 79, 76, 71, 63, 57, 58, 47, 0, 69,
	54, 55, 53, 66, 73, 74, 52, 81, 50, 80,
	49, 65, 72, 77, 64, 61, 48, 75, 62, 60,
	0, 70, 78, 82, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 79,
}
var yyPact = [...]int{

	44, -1000, -107, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 467, 492, -1000, -1000, -1000, 401, 3361, 17,
	10, -33, -1000, -1000, -1000, 372, -1000, -1000, -1000, -1000,
	-1000, 460, 464, 372, 456, 0, -1000, 3524, 483, -1000,
	193, 4, -4, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 3892, -14, -14, 14, 1631, 1631, 1631,
	-1000, -1000, 454, 218, -1000, 2889, 2889, 467, -1000, 372,
	-1000, 3687, -1000, 134, 344, 414, -1000, -1000, -1000, 452,
	3198, 3240, 40, -1000, -1000, 3892, 299, -1000, 84, 206,
	3892, 103, 24, 3892, 447, 3892, 1631, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2487, -1000, -1000, -1000, 273,
	-1000, 2889, 982, 346, 346, -1000, -1000, -1000, -1000, -1000,
	3014, 3014, 3014, 3014, 3014, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 346, 39,
	-1000, 2756, 346, 346, 346, 2889, 346, -1000, -1000, -1000,
	346, 346, 346, -1000, -1000, 336, -1000, 271, 460, 218,
	361, 3892, -1000, -1000, 3850, 3524, 3524, 3524, 3524, -1000,
	430, 424, 421, 426, 3892, -1000, 296, 218, 3198, -1000,
	-1000, 3566, -1000, -1000, 2219, 475, 1337, 56, 88, -86,
	-1000, -1000, 348, -1000, 348, 348, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 348, 348, 348, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 376, 376, 376, 368, 368,
	406, -1000, 445, -18, -11, -1000, -1000, -1000, -1000, 365,
	-1000, -1000, 850, 38, 2889, 2889, 127, 2889, 2889, 68,
	3014, 191, 75, 3014, 3014, 3014, 3014, 3014, 3014, 3014,
	3014, 3014, 3014, 3014, 3014, 3014, 3014, 3014, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 204, -1000, 372, -1000,
	-1000, -1000, -1000, 708, 2354, 2072, 294, 106, 2756, 2889,
	3850, 454, 92, 106, 3850, 2487, 2487, 2487, 2889, -1000,
	-1000, -1000, -1000, -1000, -1000, 3850, 346, -1000, 3066, -1000,
	352, -1000, 76, -1000, 35, 414, 415, 388, -1000, -1000,
	-1000, -1000, 353, -1000, -1000, -1000, -1000, -1000, 218, -1000,
	-1000, -1000, -1000, 467, 2889, 333, 1190, -1000, -1000, -1000,
	-1000, -1000, -1000, 375, 439, 72, 200, -1000, -1000, 435,
	-1000, 130, -92, -1000, -1000, 148, -1000, -1000, -1000, -1000,
	-1000, -1000, 146, -1000, -1000, -1000, 144, -1000, 3892, -1000,
	193, -1000, 3892, 3850, 475, 2487, 3524, -1000, -1000, 3403,
	-1000, -1000, 1778, 68, 79, -1000, -1000, 186, -1000, -1000,
	106, 106, 999, -1000, -1000, -1000, -1000, 191, 3014, 3014,
	3014, -6, 999, 1018, 1057, 1047, -1000, 89, 89, 45,
	45, 45, 45, 45, 172, 172, 218, -1000, 218, 2487,
	332, 346, 33, -1000, 2889, -1000, 229, 328, 2487, 104,
	-1000, 2889, 218, 257, 257, 257, -1000, 326, 280, -1000,
	-1000, 2620, 218, 290, 32, 467, 3850, 2889, 2072, -1000,
	-1000, 2889, 373, -1000, -1000, -1000, 460, 106, 1337, -1000,
	1337, 3729, -1000, 171, -1000, -1000, -78, 11, -1000, -1000,
	-1000, 259, 292, 262, 1631, -1000, -1000, 2, 471, -1000,
	284, -1000, -1000, 30, -1000, -1000, -1000, -1000, -6, 999,
	933, -1000, 3014, 3014, -1000, -1000, 257, 2487, 1925, 106,
	121, 3014, 330, 80, -1000, 2889, 234, -1000, -1000, -1000,
	-1000, 346, -1000, -1000, 354, 3729, 3729, 460, -1000, 106,
	-1000, 106, 3729, -1000, 1190, -1000, 236, -1000, 348, -1000,
	66, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 143, -1000,
	141, -1000, 3850, 469, 462, 1484, -1000, 3014, 999, 999,
	-1000, 218, -1000, 218, 348, -1000, 348, 368, 348, -46,
	348, -49, 348, 348, 348, 348, 348, 348, -1000, 722,
	-104, -1000, 106, 2889, -1000, 346, -1000, 372, 25, -1000,
	-1000, 224, -1000, -1000, 3729, -1000, -1000, 437, -1000, 366,
	233, 231, -1000, -1000, 2889, 2889, -1000, 999, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 3014, 218, 168, 106, 280, 218,
	3729, 3729, -1000, -1000, -1000, -1000, -1000, -1000, 106, 268,
	860, -1000, -1000, -1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 682, 17, 446, 681, 678, 677, 676, 674, 673,
	670, 661, 659, 653, 652, 506, 651, 648, 646, 31,
	644, 13, 22, 12, 30, 59, 643, 28, 48, 42,
	642, 34, 637, 635, 41, 634, 61, 632, 628, 36,
	627, 626, 624, 619, 617, 1, 616, 610, 608, 605,
	604, 26, 2, 6, 23, 7, 602, 162, 21, 599,
	20, 596, 595, 588, 586, 10, 583, 47, 582, 32,
	578, 573, 37, 16, 572, 571, 141, 569, 568, 27,
	0, 5, 82, 29, 567, 649, 25, 40, 564, 562,
	465, 15, 561, 560, 550, 548, 547, 545, 543, 11,
	539, 538, 534, 44, 9, 533, 530, 519, 33, 518,
	35, 517, 516, 515, 14, 8, 508, 4, 507, 39,
	505, 503, 487, 3, 502,
}
var yyR1 = [...]int{

	0, 120, 121, 121, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 3, 3, 4, 4, 5,
	5, 6, 6, 18, 18, 7, 8, 9, 9, 12,
	111, 112, 112, 112, 108, 93, 93, 93, 96, 96,
	94, 94, 94, 94, 94, 94, 95, 95, 95, 95,
	95, 97, 97, 97, 97, 97, 98, 98, 98, 98,
	98, 98, 98, 98, 98, 98, 99, 99, 103, 103,
	104, 104, 104, 101, 101, 102, 102, 105, 105, 105,
	100, 100, 100, 100, 100, 100, 106, 106, 107, 107,
	107, 107, 107, 109, 116, 116, 116, 116, 110, 110,
	118, 118, 117, 113, 113, 113, 114, 114, 114, 115,
	115, 115, 10, 10, 10, 119, 119, 11, 11, 13,
	13, 13, 13, 14, 14, 124, 15, 16, 16, 17,
	17, 19, 19, 23, 23, 22, 22, 24, 24, 24,
	24, 84, 84, 84, 83, 83, 26, 27, 27, 28,
	28, 29, 29, 29, 29, 38, 71, 71, 30, 30,
	30, 31, 31, 32, 32, 89, 89, 88, 88, 88,
	87, 87, 33, 33, 33, 34, 34, 35, 35, 37,
	37, 36, 36, 39, 39, 25, 25, 25, 25, 25,
	25, 25, 75, 75, 41, 41, 40, 40, 40, 40,
	40, 40, 40, 40, 40, 40, 50, 50, 50, 50,
	50, 50, 42, 42, 42, 42, 42, 42, 42, 21,
	21, 51, 51, 51, 57, 52, 52, 45, 45, 45,
	45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
	45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
	45, 45, 45, 48, 48, 48, 46, 46, 46, 46,
	46, 46, 47, 47, 47, 49, 49, 49, 92, 92,
	92, 92, 92, 92, 92, 92, 92, 92, 92, 92,
	92, 92, 92, 92, 92, 61, 61, 20, 20, 59,
	59, 60, 62, 62, 58, 58, 58, 44, 44, 44,
	44, 44, 44, 44, 63, 63, 64, 64, 65, 65,
	66, 66, 67, 68, 68, 68, 69, 69, 69, 69,
	43, 43, 43, 43, 43, 43, 70, 70, 70, 70,
	53, 53, 55, 55, 54, 56, 72, 72, 73, 76,
	76, 77, 77, 74, 74, 78, 78, 78, 81, 81,
	82, 82, 85, 85, 86, 86, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 80, 80, 80,
	80, 80, 80, 80, 80, 80, 80, 80, 80, 80,
	80, 80, 80, 80, 80, 80, 80, 80, 80, 80,
	80, 80, 80, 80, 80, 80, 80, 80, 80, 80,
	80, 80, 80, 122, 123, 90, 91, 91, 91,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 5, 8, 4, 1, 3, 1,
	3, 5, 6, 1, 1, 8, 7, 2, 7, 4,
	4, 1, 3, 3, 6, 3, 1, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 2, 2, 2, 1, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 3, 0, 5,
	0, 3, 5, 0, 1, 0, 1, 0, 1, 2,
	0, 2, 2, 2, 2, 2, 0, 1, 0, 2,
	1, 2, 1, 4, 2, 3, 2, 2, 1, 1,
	1, 3, 2, 0, 1, 3, 1, 2, 3, 1,
	1, 1, 6, 6, 8, 0, 1, 4, 4, 4,
	3, 3, 3, 2, 2, 0, 2, 0, 2, 1,
	2, 0, 1, 0, 1, 1, 3, 1, 2, 3,
	5, 0, 1, 2, 1, 1, 2, 1, 3, 1,
	1, 1, 1, 3, 3, 2, 1, 3, 4, 4,
	3, 2, 4, 0, 1, 0, 1, 0, 1, 2,
	1, 1, 1, 2, 2, 2, 3, 2, 2, 2,
	1, 1, 3, 0, 2, 1, 3, 3, 2, 3,
	1, 2, 0, 3, 1, 1, 3, 3, 4, 4,
	5, 3, 4, 5, 6, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 0,
	2, 1, 1, 1, 3, 1, 3, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 2, 2, 3, 1,
	1, 1, 1, 4, 5, 6, 6, 6, 8, 7,
	5, 4, 1, 1, 1, 4, 4, 4, 2, 1,
	2, 2, 2, 1, 2, 2, 1, 2, 2, 2,
	2, 2, 2, 2, 1, 0, 1, 0, 2, 1,
	2, 4, 0, 2, 1, 3, 5, 1, 1, 1,
	1, 1, 1, 1, 0, 3, 0, 2, 0, 3,
	1, 3, 2, 0, 1, 1, 0, 2, 4, 4,
	2, 1, 3, 5, 4, 6, 1, 3, 3, 5,
	1, 3, 1, 2, 3, 1, 1, 3, 3, 0,
	2, 0, 3, 0, 1, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -120, -1, -2, -6, -7, -8, -9, -10, -11,
	-13, -14, -3, -4, -18, 8, 9, -12, 91, 92,
	93, 106, 23, 107, 6, -122, 7, 146, 39, -121,
	152, -65, 14, -17, 5, -15, -124, -15, -15, -111,
	39, -78, 96, 101, -81, 42, -80, 115, 134, 128,
	126, 108, 124, 120, 118, 119, 105, 113, 114, 29,
	137, 133, 136, 112, 132, 129, 121, 17, 102, 117,
	139, 111, 130, 122, 123, 135, 110, 131, 140, 151,
	127, 125, 141, 96, 96, 97, 91, 97, 96, 142,
	-90, -90, -15, -2, -69, 16, 15, -5, -3, -122,
	18, -74, 99, -16, -27, -28, -29, -30, -38, -57,
	-122, -36, -85, 42, -80, 10, -112, -108, 42, 97,
	-77, 100, -36, -76, 100, -76, 96, -91, -122, -82,
	-81, -79, 95, 55, 20, 22, 138, 58, 15, 59,
	91, 35, 144, 145, 143, 148, 26, 9, 23, 107,
	19, 83, 93, 62, 63, 109, 21, 53, 10, 12,
	13, 100, 99, 73, 97, 33, 7, 89, 24, 70,
	30, 25, 31, 71, 16, 85, 36, 56, 51, 37,
	54, 14, 34, 72, 94, 146, 32, 6, 150, 27,
	106, 96, 142, 61, 98, 52, 5, 101, 8, 38,
	28, 60, 11, -91, -91, -19, 19, -123, 41, -25,
	-40, 56, -45, 26, 21, -44, -41, -58, -56, -57,
	79, 80, 87, 57, 89, -48, -46, -47, -49, 44,
	43, 45, 46, 47, 48, 51, 52, 53, -81, -85,
	-54, -122, 147, 148, 149, 59, 28, 143, 144, 145,
	100, 85, 146, 42, -80, -66, -67, -25, -65, -2,
	-37, 24, -36, 50, 27, 40, -33, -34, -35, 30,
	33, 35, 31, 36, -89, 20, -27, -2, -122, -88,
	-87, 20, -85, 44, 90, -36, 41, 40, -93, -96,
	-98, -97, -94, -95, 126, 127, 130, 131, 132, 133,
	134, 135, 136, 137, 108, 122, 123, 124, 125, 110,
	111, 112, 113, 114, 115, 117, 118, 119, 120, 121,
	42, -36, 56, 95, 94, -36, 21, -36, -91, -22,
	-24, 81, -25, -85, 55, 54, 70, 40, 17, -25,
	-42, 73, 56, 71, 72, 58, 76, 75, 86, 79,
	80, 81, 82, 83, 84, 85, 77, 78, 64, 65,
	66, 67, 68, 69, 74, -75, -122, -57, -122, -45,
	-45, -45, -45, -45, -122, 90, -52, -25, -122, -122,
	-122, -122, -61, -25, -122, -122, -122, -122, 40, -68,
	22, 23, -69, -123, -43, 27, 28, -2, -122, -36,
	-72, -73, -58, -81, -85, -28, -29, -28, -29, 30,
	30, 30, 34, 30, -34, -85, -123, -123, -2, -87,
	-86, -85, -79, -39, 11, -113, -114, -115, -82, 44,
	45, -108, -109, -116, 102, 101, -110, 97, 25, -105,
	51, 56, -101, 140, -99, 39, -99, -99, -99, -99,
	-99, -103, 39, -103, -103, -104, 39, -104, 37, 21,
	-119, 103, 98, -119, -26, 40, 10, -84, -83, 20,
	-81, 44, 90, -25, -25, -50, 51, 56, 52, 53,
	-25, -25, -45, -51, -54, -57, 49, 73, 71, 72,
	58, -45, -45, -45, -45, -45, -45, -45, -45, -45,
	-45, -45, -45, -45, -45, -45, 42, -81, -23, 19,
	-22, -82, -86, -79, 40, -123, -25, -58, -19, -59,
	-60, 60, -58, -22, -22, -22, -67, -72, -53, -55,
	-54, -122, -2, -70, -81, -39, 40, 64, 90, -32,
	-31, 37, 38, -31, 30, -123, -65, -25, 40, -115,
	64, 39, 25, -110, 42, 42, -100, 26, 51, -102,
	141, 45, 45, 45, -36, -108, -36, -58, -39, -24,
	-27, -83, 81, -86, 51, 52, 53, -51, -45, -45,
	-45, -21, 109, 55, -123, -123, -22, -122, 90, -25,
	20, 40, -22, -62, -60, 62, -25, -123, -123, -123,
	-123, 40, -123, -123, -123, 40, 90, -65, -73, -25,
	-82, -25, 39, -69, -114, -115, -118, -117, -81, 42,
	-106, 138, 44, 45, 46, 51, 143, 41, 40, 41,
	40, -91, 98, -63, 12, 90, -21, 55, -45, -45,
	-123, -23, -82, -92, 126, 108, 124, 120, 129, 139,
	122, 140, 123, 113, 110, 111, 112, 115, 44, -45,
	-65, 63, -25, 61, -55, 28, -2, -122, -81, -81,
	-69, -71, -81, 41, 40, -99, -107, 102, 25, 101,
	45, 45, -58, -64, 13, 15, 81, -45, -123, -123,
	-99, -99, -104, -99, 114, -99, 114, -99, -99, -99,
	-99, -99, -99, -123, 40, -20, 150, -25, -53, -2,
	90, 40, 41, -117, 25, 25, 41, 41, -25, -52,
	-45, -123, 44, -123, -81, -81, -123,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 308, 0, 125, 125, 125, 0, 345, 0,
	0, 0, 465, 465, 125, 0, 23, 24, 463, 1,
	3, 316, 0, 0, 129, 343, 127, 0, 0, 27,
	0, 0, 341, 346, 347, 348, 349, 427, 428, 429,
	430, 431, 432, 433, 434, 435, 436, 437, 438, 439,
	440, 441, 442, 443, 444, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 457, 458, 459,
	460, 461, 462, 0, 339, 339, 0, 466, 466, 466,
	123, 124, 131, 17, 13, 0, 0, 308, 19, 0,
	130, 0, 344, 126, 0, 147, 149, 150, 151, -2,
	0, 167, 181, 352, 353, 0, 0, 31, 0, 0,
	0, 0, 0, 0, 0, 0, 466, 120, 467, 468,
	350, 351, 356, 357, 358, 359, 360, 361, 362, 363,
	364, 365, 366, 367, 368, 369, 370, 371, 372, 373,
	374, 375, 376, 377, 378, 379, 380, 381, 382, 383,
	384, 385, 386, 387, 388, 389, 390, 391, 392, 393,
	394, 395, 396, 397, 398, 399, 400, 401, 402, 403,
	404, 405, 406, 407, 408, 409, 410, 411, 412, 413,
	414, 415, 416, 417, 418, 419, 420, 421, 422, 423,
	424, 425, 426, 121, 122, 0, 132, 18, 464, 317,
	185, 0, 190, 192, 0, 227, 228, 229, 230, 231,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 297,
	298, 299, 300, 301, 302, 303, 194, 195, 294, 0,
	335, 0, 0, 0, 0, 285, 0, 262, 263, 264,
	0, 0, 0, -2, -2, 309, 310, 313, 316, 17,
	0, 0, 180, 128, 0, 0, 0, 0, 0, 172,
	0, 0, 0, 0, 0, 166, 0, 17, 0, 155,
	168, 0, 170, 171, 0, 183, 103, 0, 77, 73,
	36, 37, 66, 39, 66, 66, 58, 59, 60, 61,
	62, 63, 64, 65, 51, 66, 66, 66, 55, 40,
	41, 42, 43, 44, 45, 68, 68, 68, 70, 70,
	0, 29, 0, 115, 115, 117, 340, 118, 119, 16,
	135, 137, 141, 0, 0, 0, 0, 0, 0, 188,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	214, 215, 216, 217, 218, 191, 0, 205, 0, 244,
	245, 246, 247, 0, 133, 0, 0, 225, 0, 0,
	0, 131, 0, 286, 0, 0, 0, 0, 0, 312,
	314, 315, 14, 20, 21, 0, 0, -2, 0, 179,
	183, 336, 0, 294, 0, 148, 163, 0, 160, 173,
	174, 175, 0, 177, 178, 153, 154, 224, 17, 169,
	182, 354, 355, 308, 0, 30, 104, 106, 109, 110,
	111, 32, 33, 0, 0, 0, 0, 98, 99, 80,
	78, 0, 75, 74, 38, 0, 56, 57, 52, 53,
	54, 46, 0, 47, 48, 49, 0, 50, 0, 342,
	0, 116, 0, 0, 183, 0, 0, 138, 142, 0,
	144, 145, 0, 186, 187, 189, 206, 0, 208, 210,
	318, 319, 196, 197, 221, 222, 223, 0, 0, 0,
	0, 219, 201, 0, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 0, 248, 0, 0,
	134, 295, 0, -2, 0, 334, 0, 0, 0, 292,
	289, 0, 0, 0, 0, 0, 311, 22, 320, 330,
	332, 0, 17, 0, 326, 308, 0, 0, 0, 158,
	164, 0, 0, 159, 176, -2, 316, 184, 0, 107,
	0, 0, 94, 0, 96, 97, 86, 0, 79, 35,
	76, 0, 0, 0, 466, 112, 113, 0, 304, 136,
	146, 143, 139, 0, 207, 209, 211, 198, 219, 202,
	0, 199, 0, 0, 193, 253, 0, 133, 0, 226,
	0, 0, 308, 0, 290, 0, 0, 261, 265, 266,
	267, 0, 333, -2, 0, 0, 0, 316, 337, 338,
	295, 161, 0, 26, 105, 108, 0, 100, 66, 95,
	88, 87, 81, 82, 83, 84, 85, 67, 0, 71,
	0, 28, 0, 306, 0, 0, 200, 0, 220, 203,
	254, 0, 296, 0, 66, 269, 66, 70, 66, 273,
	66, 276, 66, 66, 66, 66, 66, 66, 284, 0,
	287, 260, 293, 0, 331, 0, -2, 0, 328, 327,
	25, 0, 156, 93, 0, 102, 34, 0, 90, 92,
	0, 0, 114, 15, 0, 0, 140, 204, 255, 256,
	268, 270, 271, 272, 274, 275, 277, 278, 279, 280,
	281, 282, 283, 257, 0, 0, 0, 291, 323, 17,
	0, 0, 162, 101, 89, 91, 69, 72, 307, 305,
	0, 259, 288, -2, 329, 157, 258,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 57, 3, 3, 3, 84, 76, 3,
	39, 41, 81, 79, 40, 80, 90, 82, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 152,
	65, 64, 66, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 86, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 75, 3, 87,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 42, 43, 44,
	45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
	55, 56, 58, 59, 60, 61, 62, 63, 67, 68,
	69, 70, 71, 72, 73, 74, 77, 78, 83, 85,
	88, 89, 91, 92, 93, 94, 95, 96, 97, 98,
	99, 100, 101, 102, 103, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:242
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:247
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:248
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:252
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 13:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:266
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			yyVAL.selStmt = sel
		}
	case 14:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:273
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit}
		}
	case 15:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:280
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Distinct: yyDollar[3].str, SelectExprs: yyDollar[4].selectExprs, From: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), GroupBy: GroupBy(yyDollar[7].exprs), Having: NewWhere(HavingStr, yyDollar[8].expr)}
		}
	case 16:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:284
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Distinct: yyDollar[3].str, SelectExprs: yyDollar[4].selectExprs}
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:290
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 18:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:294
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:300
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 20:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:304
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 21:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:311
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[5].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			yyVAL.statement = ins
		}
	case 22:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:321
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[6].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}}
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:333
		{
			yyVAL.str = InsertStr
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:337
		{
			yyVAL.str = ReplaceStr
		}
	case 25:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:343
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 26:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:349
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 27:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:355
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 28:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:360
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName}
		}
	case 29:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:367
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 30:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:374
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:381
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:386
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:390
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 34:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:396
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[5].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[6].colKeyOpt
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:405
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 38:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:415
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:420
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:426
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:430
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:434
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:438
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:442
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:446
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 46:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:452
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 47:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:458
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 48:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:464
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:470
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 50:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:476
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:484
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:488
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:492
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:496
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:500
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:506
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:510
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:514
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:518
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:522
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:526
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:530
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:534
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:538
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:542
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 66:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:547
		{
			yyVAL.optVal = nil
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:551
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:556
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 69:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:560
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:568
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:572
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 72:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:578
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 73:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:586
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:590
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 75:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:595
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:599
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 77:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:605
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:609
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:613
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 80:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:618
		{
			yyVAL.optVal = nil
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:622
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:626
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:630
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:634
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:638
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 86:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:643
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:647
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 88:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:652
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:656
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:660
		{
			yyVAL.colKeyOpt = colKey
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:664
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:668
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 93:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:674
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:680
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:684
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:688
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:692
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:698
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:702
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:708
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:712
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:718
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 103:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:723
		{
			yyVAL.str = ""
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:727
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:731
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:739
		{
			yyVAL.str = yyDollar[1].str
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:743
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:747
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:753
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:757
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:761
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 112:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:767
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 113:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:771
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[6].tableName}
		}
	case 114:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:776
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 115:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:782
		{
		}
	case 117:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:786
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 118:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:794
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropIndexStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 119:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:804
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:808
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:812
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:816
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:822
		{
			yyVAL.statement = &OtherRead{}
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:826
		{
			yyVAL.statement = &OtherRead{}
		}
	case 125:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:831
		{
			setAllowComments(yylex, true)
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:835
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 127:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:841
		{
			yyVAL.bytes2 = nil
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:845
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:851
		{
			yyVAL.str = UnionStr
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:855
		{
			yyVAL.str = UnionAllStr
		}
	case 131:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:860
		{
			yyVAL.str = ""
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:864
		{
			yyVAL.str = DistinctStr
		}
	case 133:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:869
		{
			yyVAL.selectExprs = nil
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:873
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:879
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:883
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:889
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:893
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:897
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 140:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:901
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:906
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:910
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 143:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:914
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:921
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:927
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:933
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:937
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:947
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:951
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery}
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:955
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:959
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:965
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent}
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:971
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:975
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 158:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:981
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 159:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:985
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:989
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:995
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 162:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:997
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 163:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1001
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1003
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 165:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1006
		{
			yyVAL.empty = struct{}{}
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1008
		{
			yyVAL.empty = struct{}{}
		}
	case 167:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1011
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1015
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1019
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1026
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1032
		{
			yyVAL.str = JoinStr
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1036
		{
			yyVAL.str = InnerJoinStr
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1040
		{
			yyVAL.str = CrossJoinStr
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1046
		{
			yyVAL.str = LeftJoinStr
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1050
		{
			yyVAL.str = LeftJoinStr
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1056
		{
			yyVAL.str = NaturalJoinStr
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1060
		{
			yyVAL.str = NaturalLeftJoinStr
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1066
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1070
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1076
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1080
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 183:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1085
		{
			yyVAL.expr = nil
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1089
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1095
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1099
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1103
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1107
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1111
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1115
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1119
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 192:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1125
		{
			yyVAL.str = ""
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1129
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1135
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1139
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1145
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1149
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 198:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1153
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 199:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1157
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 200:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1161
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1165
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 202:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1169
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 203:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1173
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 204:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1177
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1181
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1187
		{
			yyVAL.str = IsNullStr
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1191
		{
			yyVAL.str = IsNotNullStr
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1195
		{
			yyVAL.str = IsTrueStr
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1199
		{
			yyVAL.str = IsNotTrueStr
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1203
		{
			yyVAL.str = IsFalseStr
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1207
		{
			yyVAL.str = IsNotFalseStr
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1213
		{
			yyVAL.str = EqualStr
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1217
		{
			yyVAL.str = LessThanStr
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1221
		{
			yyVAL.str = GreaterThanStr
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1225
		{
			yyVAL.str = LessEqualStr
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1229
		{
			yyVAL.str = GreaterEqualStr
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1233
		{
			yyVAL.str = NotEqualStr
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1237
		{
			yyVAL.str = NullSafeNotEqualStr
		}
	case 219:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1242
		{
			yyVAL.expr = nil
		}
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1246
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1252
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1256
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1260
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1266
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1272
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 226:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1276
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1282
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1286
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1290
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1294
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1298
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 232:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1302
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1306
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1310
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1314
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1318
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1322
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1326
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1330
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1334
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1338
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1342
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1346
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1350
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1358
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1372
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1376
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1380
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 253:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1398
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 254:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1402
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 255:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1406
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 256:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1416
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 257:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1420
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 258:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1424
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 259:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1428
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 260:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1432
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 261:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1436
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1446
		{
			yyVAL.expr = &TimeExpr{Expr: NewColIdent("current_timestamp")}
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1451
		{
			yyVAL.expr = &TimeExpr{Expr: NewColIdent("current_date")}
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1456
		{
			yyVAL.expr = &TimeExpr{Expr: NewColIdent("current_time")}
		}
	case 265:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1466
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 266:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1470
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 267:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1474
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1480
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1484
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1488
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1492
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1498
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1502
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1506
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1510
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1514
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1518
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1522
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1526
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1530
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1534
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1538
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1542
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1546
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1551
		{
			yyVAL.expr = nil
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1555
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 287:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1560
		{
			yyVAL.str = string("")
		}
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1564
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1570
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1574
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1580
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 292:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1585
		{
			yyVAL.expr = nil
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1589
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1595
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1599
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 296:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1603
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1609
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1613
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1617
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1621
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1625
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1629
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1633
		{
			yyVAL.expr = &NullVal{}
		}
	case 304:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1638
		{
			yyVAL.exprs = nil
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1642
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 306:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1647
		{
			yyVAL.expr = nil
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1651
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 308:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1656
		{
			yyVAL.orderBy = nil
		}
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1660
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1666
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 311:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1670
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1676
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 313:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1681
		{
			yyVAL.str = AscScr
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1685
		{
			yyVAL.str = AscScr
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1689
		{
			yyVAL.str = DescScr
		}
	case 316:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1694
		{
			yyVAL.limit = nil
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1698
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 318:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1702
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 319:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1706
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1719
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1723
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1727
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 323:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1732
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 324:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1736
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 325:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1740
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1747
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1751
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1755
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 329:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1759
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1765
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1769
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1775
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1779
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1785
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1791
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1801
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1805
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1811
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 339:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1816
		{
			yyVAL.byt = 0
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1818
		{
			yyVAL.byt = 1
		}
	case 341:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1821
		{
			yyVAL.empty = struct{}{}
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1823
		{
			yyVAL.empty = struct{}{}
		}
	case 343:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1826
		{
			yyVAL.str = ""
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1828
		{
			yyVAL.str = IgnoreStr
		}
	case 345:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1831
		{
			yyVAL.empty = struct{}{}
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1833
		{
			yyVAL.empty = struct{}{}
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1835
		{
			yyVAL.empty = struct{}{}
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1839
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1843
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1850
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1856
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1860
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1867
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2000
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2009
		{
			decNesting(yylex)
		}
	case 465:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2014
		{
			forceEOF(yylex)
		}
	case 466:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2019
		{
			forceEOF(yylex)
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2023
		{
			forceEOF(yylex)
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2027
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
