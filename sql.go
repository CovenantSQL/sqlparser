// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:19
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:19

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:54
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	joinCondition     JoinCondition
	tableName         TableName
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	setExprs          SetExprs
	updateExpr        *UpdateExpr
	setExpr           *SetExpr
	colIdent          ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const ALL = 57360
const DISTINCT = 57361
const AS = 57362
const EXISTS = 57363
const ASC = 57364
const DESC = 57365
const INTO = 57366
const KEY = 57367
const DEFAULT = 57368
const SET = 57369
const VALUES = 57370
const LAST_INSERT_ID = 57371
const JOIN = 57372
const LEFT = 57373
const RIGHT = 57374
const INNER = 57375
const OUTER = 57376
const CROSS = 57377
const NATURAL = 57378
const ON = 57379
const USING = 57380
const ID = 57381
const HEX = 57382
const STRING = 57383
const INTEGRAL = 57384
const FLOAT = 57385
const HEXNUM = 57386
const VALUE_ARG = 57387
const POS_ARG = 57388
const LIST_ARG = 57389
const COMMENT = 57390
const NULL = 57391
const TRUE = 57392
const FALSE = 57393
const FULL = 57394
const COLUMNS = 57395
const OR = 57396
const AND = 57397
const NOT = 57398
const BETWEEN = 57399
const CASE = 57400
const WHEN = 57401
const THEN = 57402
const ELSE = 57403
const END = 57404
const LE = 57405
const GE = 57406
const NE = 57407
const IS = 57408
const LIKE = 57409
const REGEXP = 57410
const MATCH = 57411
const IN = 57412
const NULL_SAFE_NOTEQUAL = 57413
const SHIFT_LEFT = 57414
const SHIFT_RIGHT = 57415
const DIV = 57416
const MOD = 57417
const UNARY = 57418
const INTERVAL = 57419
const CREATE = 57420
const ALTER = 57421
const DROP = 57422
const RENAME = 57423
const ADD = 57424
const TABLE = 57425
const VIRTUAL = 57426
const INDEX = 57427
const TO = 57428
const IGNORE = 57429
const IF = 57430
const UNIQUE = 57431
const PRIMARY = 57432
const COLUMN = 57433
const CONSTRAINT = 57434
const FOREIGN = 57435
const SHOW = 57436
const DESCRIBE = 57437
const DATE = 57438
const ESCAPE = 57439
const EXPLAIN = 57440
const TINYINT = 57441
const SMALLINT = 57442
const MEDIUMINT = 57443
const INT = 57444
const INTEGER = 57445
const BIGINT = 57446
const INTNUM = 57447
const REAL = 57448
const DOUBLE = 57449
const FLOAT_TYPE = 57450
const DECIMAL = 57451
const NUMERIC = 57452
const TIME = 57453
const TIMESTAMP = 57454
const DATETIME = 57455
const YEAR = 57456
const CHAR = 57457
const VARCHAR = 57458
const BOOL = 57459
const NCHAR = 57460
const TEXT = 57461
const TINYTEXT = 57462
const MEDIUMTEXT = 57463
const LONGTEXT = 57464
const BLOB = 57465
const TINYBLOB = 57466
const MEDIUMBLOB = 57467
const LONGBLOB = 57468
const AUTO_INCREMENT = 57469
const SIGNED = 57470
const UNSIGNED = 57471
const ZEROFILL = 57472
const TABLES = 57473
const CURRENT_TIMESTAMP = 57474
const CURRENT_DATE = 57475
const CURRENT_TIME = 57476
const REPLACE = 57477
const CAST = 57478
const GROUP_CONCAT = 57479
const SEPARATOR = 57480
const UNUSED = 57481

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"KEY",
	"DEFAULT",
	"SET",
	"VALUES",
	"LAST_INSERT_ID",
	"JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"POS_ARG",
	"LIST_ARG",
	"COMMENT",
	"NULL",
	"TRUE",
	"FALSE",
	"FULL",
	"COLUMNS",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"IS",
	"LIKE",
	"REGEXP",
	"MATCH",
	"IN",
	"NULL_SAFE_NOTEQUAL",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"INTERVAL",
	"'.'",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ADD",
	"TABLE",
	"VIRTUAL",
	"INDEX",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"FOREIGN",
	"SHOW",
	"DESCRIBE",
	"DATE",
	"ESCAPE",
	"EXPLAIN",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"AUTO_INCREMENT",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"TABLES",
	"CURRENT_TIMESTAMP",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"REPLACE",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 17,
	-2, 4,
	-1, 119,
	1, 158,
	5, 158,
	11, 158,
	12, 158,
	13, 158,
	14, 158,
	16, 158,
	27, 158,
	30, 158,
	31, 158,
	33, 158,
	35, 158,
	36, 158,
	37, 158,
	38, 158,
	40, 158,
	41, 158,
	157, 158,
	-2, 171,
	-1, 190,
	94, 359,
	-2, 355,
	-1, 191,
	94, 360,
	-2, 356,
	-1, 409,
	5, 17,
	-2, 328,
	-1, 417,
	94, 177,
	-2, 151,
	-1, 527,
	94, 362,
	-2, 358,
	-1, 559,
	5, 18,
	-2, 229,
	-1, 617,
	5, 18,
	-2, 329,
	-1, 681,
	5, 17,
	-2, 331,
	-1, 743,
	5, 18,
	-2, 332,
}

const yyPrivate = 57344

const yyLast = 4437

var yyAct = [...]int{

	191, 389, 438, 699, 632, 467, 176, 414, 541, 542,
	522, 32, 415, 437, 436, 597, 413, 442, 213, 48,
	533, 433, 496, 98, 98, 46, 178, 344, 104, 214,
	3, 124, 554, 267, 412, 193, 94, 144, 142, 98,
	473, 448, 48, 116, 463, 31, 725, 204, 126, 146,
	574, 140, 456, 455, 125, 636, 102, 114, 130, 115,
	637, 638, 639, 346, 717, 715, 695, 474, 640, 131,
	475, 25, 27, 15, 16, 474, 134, 112, 648, 86,
	128, 87, 265, 260, 259, 92, 98, 136, 22, 450,
	129, 98, 362, 361, 371, 372, 364, 365, 366, 367,
	368, 369, 370, 363, 29, 85, 568, 551, 729, 687,
	363, 651, 98, 366, 367, 368, 369, 370, 363, 195,
	620, 98, 98, 98, 350, 88, 603, 598, 552, 485,
	90, 98, 89, 388, 98, 676, 98, 98, 524, 196,
	179, 26, 98, 139, 141, 133, 534, 696, 694, 364,
	365, 366, 367, 368, 369, 370, 363, 348, 217, 269,
	18, 19, 20, 258, 452, 641, 449, 26, 504, 147,
	194, 453, 350, 103, 572, 109, 21, 23, 200, 120,
	24, 501, 502, 503, 500, 402, 403, 255, 256, 371,
	372, 364, 365, 366, 367, 368, 369, 370, 363, 98,
	534, 698, 609, 98, 98, 98, 98, 697, 126, 577,
	576, 575, 98, 353, 349, 348, 98, 28, 742, 98,
	349, 348, 48, 48, 404, 349, 348, 409, 441, 126,
	350, 29, 678, 135, 405, 125, 350, 634, 416, 731,
	732, 350, 499, 390, 569, 431, 395, 419, 653, 421,
	26, 429, 430, 145, 443, 432, 98, 98, 427, 737,
	469, 215, 418, 352, 420, 736, 98, 98, 642, 362,
	361, 371, 372, 364, 365, 366, 367, 368, 369, 370,
	363, 343, 458, 459, 599, 528, 351, 201, 605, 589,
	590, 591, 381, 460, 461, 462, 465, 466, 691, 690,
	202, 476, 615, 349, 348, 362, 361, 371, 372, 364,
	365, 366, 367, 368, 369, 370, 363, 387, 202, 350,
	391, 392, 393, 29, 396, 349, 348, 643, 397, 398,
	399, 480, 145, 550, 121, 489, 491, 492, 410, 645,
	644, 350, 490, 120, 120, 120, 120, 48, 619, 145,
	528, 145, 25, 126, 202, 145, 215, 93, 99, 483,
	362, 361, 371, 372, 364, 365, 366, 367, 368, 369,
	370, 363, 206, 209, 680, 207, 25, 208, 210, 555,
	556, 33, 497, 222, 221, 29, 25, 48, 480, 434,
	562, 525, 400, 521, 481, 441, 457, 407, 408, 468,
	627, 565, 464, 126, 535, 41, 527, 480, 578, 29,
	579, 48, 486, 487, 126, 493, 494, 548, 550, 29,
	132, 431, 526, 547, 480, 138, 424, 529, 555, 556,
	425, 12, 531, 416, 549, 543, 539, 48, 426, 209,
	545, 558, 540, 441, 416, 560, 199, 423, 422, 571,
	563, 735, 734, 557, 566, 390, 530, 220, 472, 262,
	212, 706, 143, 110, 194, 257, 108, 105, 261, 559,
	263, 264, 206, 209, 48, 207, 98, 208, 210, 106,
	126, 33, 98, 126, 582, 48, 125, 705, 525, 567,
	36, 126, 441, 650, 434, 266, 137, 586, 561, 122,
	585, 583, 35, 527, 37, 580, 38, 39, 584, 100,
	30, 1, 91, 416, 631, 445, 101, 435, 123, 588,
	40, 444, 26, 592, 693, 635, 451, 497, 573, 454,
	570, 225, 391, 411, 226, 224, 536, 537, 538, 228,
	227, 223, 659, 211, 216, 482, 42, 111, 688, 544,
	546, 26, 401, 608, 192, 624, 704, 126, 649, 441,
	600, 621, 607, 48, 394, 48, 48, 622, 532, 441,
	527, 441, 633, 611, 612, 613, 614, 629, 630, 98,
	98, 154, 616, 617, 618, 155, 625, 416, 488, 628,
	470, 471, 604, 165, 162, 164, 163, 152, 610, 406,
	477, 478, 354, 153, 48, 148, 658, 118, 390, 652,
	441, 197, 156, 657, 205, 623, 150, 203, 675, 626,
	48, 48, 120, 553, 117, 679, 684, 685, 48, 479,
	48, 724, 683, 14, 126, 34, 441, 113, 11, 656,
	689, 10, 543, 563, 17, 9, 8, 48, 681, 701,
	686, 119, 48, 441, 658, 126, 703, 702, 441, 7,
	177, 6, 601, 5, 4, 107, 602, 13, 2, 713,
	606, 0, 0, 677, 543, 0, 0, 0, 0, 0,
	0, 0, 0, 95, 95, 416, 692, 0, 48, 727,
	730, 0, 48, 0, 441, 709, 733, 710, 633, 95,
	0, 0, 0, 48, 0, 701, 738, 543, 740, 441,
	0, 0, 728, 711, 0, 712, 0, 714, 0, 716,
	0, 718, 719, 720, 721, 722, 723, 0, 0, 0,
	48, 0, 48, 119, 0, 0, 744, 0, 126, 0,
	0, 0, 726, 0, 745, 0, 95, 0, 0, 0,
	0, 95, 0, 0, 0, 0, 544, 0, 0, 682,
	0, 0, 741, 0, 380, 0, 743, 674, 0, 739,
	390, 0, 95, 0, 382, 383, 384, 385, 386, 0,
	0, 95, 219, 95, 0, 0, 0, 700, 544, 0,
	0, 95, 0, 0, 95, 0, 95, 95, 0, 0,
	0, 0, 268, 347, 0, 0, 0, 0, 0, 0,
	581, 0, 0, 0, 0, 119, 119, 119, 119, 0,
	0, 544, 0, 26, 0, 0, 0, 0, 119, 0,
	0, 0, 0, 0, 0, 0, 661, 0, 0, 670,
	671, 672, 669, 700, 673, 0, 0, 0, 0, 663,
	0, 666, 668, 662, 0, 660, 0, 0, 664, 95,
	0, 0, 219, 95, 95, 95, 95, 0, 665, 667,
	0, 0, 428, 0, 0, 0, 95, 0, 0, 219,
	361, 371, 372, 364, 365, 366, 367, 368, 369, 370,
	363, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 69, 0, 0, 484, 0, 0, 0,
	0, 0, 0, 646, 647, 61, 95, 95, 0, 0,
	0, 0, 0, 0, 0, 0, 95, 95, 47, 0,
	127, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 349, 348, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 350,
	0, 0, 0, 0, 0, 0, 0, 0, 498, 0,
	0, 495, 0, 0, 505, 506, 507, 508, 509, 510,
	511, 512, 513, 514, 515, 516, 517, 518, 519, 520,
	0, 0, 0, 70, 0, 0, 58, 0, 0, 53,
	0, 0, 78, 73, 65, 59, 60, 49, 0, 71,
	56, 57, 55, 68, 75, 76, 54, 83, 52, 82,
	51, 67, 74, 79, 66, 63, 50, 77, 64, 62,
	0, 72, 80, 84, 0, 0, 0, 0, 0, 0,
	0, 0, 81, 0, 0, 0, 0, 0, 347, 268,
	0, 0, 0, 0, 0, 0, 0, 219, 347, 347,
	347, 0, 0, 0, 0, 0, 0, 0, 219, 0,
	0, 0, 239, 0, 0, 244, 245, 246, 247, 248,
	249, 0, 250, 251, 252, 253, 254, 240, 241, 242,
	243, 229, 230, 0, 119, 231, 232, 233, 234, 235,
	236, 237, 238, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 498, 0, 0, 0, 0, 593, 594,
	595, 596, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 95, 219, 0, 0,
	0, 347, 95, 356, 0, 360, 268, 0, 0, 0,
	0, 373, 374, 375, 376, 377, 378, 0, 357, 358,
	359, 355, 379, 362, 361, 371, 372, 364, 365, 366,
	367, 368, 369, 370, 363, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 347, 0, 0, 0, 0, 0,
	0, 0, 347, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 0, 268, 0, 654, 655, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 95,
	95, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 347, 0, 0, 0, 0, 0, 0,
	708, 334, 325, 303, 336, 284, 295, 341, 296, 297,
	319, 276, 311, 69, 0, 287, 272, 293, 273, 285,
	305, 308, 283, 327, 338, 61, 307, 309, 324, 302,
	320, 279, 314, 317, 337, 0, 0, 0, 47, 219,
	439, 440, 0, 0, 0, 0, 0, 0, 316, 333,
	294, 0, 0, 318, 271, 315, 0, 275, 277, 340,
	331, 290, 291, 564, 0, 0, 0, 0, 0, 306,
	310, 321, 312, 300, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 288, 0, 313, 0, 0, 0, 304,
	0, 278, 0, 289, 322, 270, 329, 339, 301, 332,
	299, 298, 335, 70, 0, 0, 58, 328, 286, 53,
	292, 342, 78, 73, 65, 59, 60, 49, 0, 71,
	56, 57, 55, 68, 75, 76, 54, 83, 52, 82,
	51, 67, 74, 79, 66, 63, 50, 77, 64, 62,
	274, 72, 80, 84, 330, 282, 280, 281, 323, 0,
	0, 326, 81, 334, 325, 303, 336, 284, 295, 341,
	296, 297, 319, 276, 311, 69, 0, 287, 272, 293,
	273, 285, 305, 308, 283, 327, 338, 61, 307, 309,
	324, 302, 320, 279, 314, 317, 337, 0, 0, 0,
	47, 0, 439, 440, 0, 0, 0, 0, 0, 0,
	316, 333, 294, 0, 0, 318, 271, 315, 0, 275,
	277, 340, 331, 290, 291, 0, 0, 0, 0, 0,
	0, 306, 310, 321, 312, 300, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 288, 0, 313, 0, 0,
	0, 304, 0, 278, 0, 289, 322, 270, 329, 339,
	301, 332, 299, 298, 335, 70, 0, 0, 58, 328,
	286, 53, 292, 342, 78, 73, 65, 59, 60, 49,
	0, 71, 56, 57, 55, 68, 75, 76, 54, 83,
	52, 82, 51, 67, 74, 79, 66, 63, 50, 77,
	64, 62, 274, 72, 80, 84, 330, 282, 280, 281,
	323, 0, 0, 326, 81, 334, 325, 303, 336, 284,
	295, 341, 296, 297, 319, 276, 311, 69, 0, 287,
	272, 293, 273, 285, 305, 308, 283, 327, 338, 61,
	307, 309, 324, 302, 320, 279, 314, 317, 337, 29,
	0, 0, 47, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 316, 333, 294, 0, 0, 318, 271, 315,
	0, 275, 277, 340, 331, 290, 291, 0, 0, 0,
	0, 0, 0, 306, 310, 321, 312, 300, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 288, 0, 313,
	0, 0, 0, 304, 0, 278, 0, 289, 322, 270,
	329, 339, 301, 332, 299, 298, 335, 70, 0, 0,
	58, 328, 286, 53, 292, 342, 78, 73, 65, 59,
	60, 49, 0, 71, 56, 57, 55, 68, 75, 76,
	54, 83, 52, 82, 51, 67, 74, 79, 66, 63,
	50, 77, 64, 62, 274, 72, 80, 84, 330, 282,
	280, 281, 323, 0, 0, 326, 81, 334, 325, 303,
	336, 284, 295, 341, 296, 297, 319, 276, 311, 69,
	0, 287, 272, 293, 273, 285, 305, 308, 283, 327,
	338, 61, 307, 309, 324, 302, 320, 279, 314, 317,
	337, 0, 0, 0, 47, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 316, 333, 294, 0, 0, 318,
	271, 315, 0, 275, 277, 340, 331, 290, 291, 0,
	0, 0, 0, 0, 0, 306, 310, 321, 312, 300,
	0, 0, 0, 0, 0, 0, 0, 707, 0, 288,
	0, 313, 0, 0, 0, 304, 0, 278, 0, 289,
	322, 270, 329, 339, 301, 332, 299, 298, 335, 70,
	0, 0, 58, 328, 286, 53, 292, 342, 78, 73,
	65, 59, 60, 49, 0, 71, 56, 57, 55, 68,
	75, 76, 54, 83, 52, 82, 51, 67, 74, 79,
	66, 63, 50, 77, 64, 62, 274, 72, 80, 84,
	330, 282, 280, 281, 323, 0, 0, 326, 81, 334,
	325, 303, 336, 284, 295, 341, 296, 297, 319, 276,
	311, 69, 0, 287, 272, 293, 273, 285, 305, 308,
	283, 327, 338, 61, 307, 309, 324, 302, 320, 279,
	314, 317, 337, 0, 0, 0, 190, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 316, 333, 294, 0,
	0, 318, 271, 315, 0, 275, 277, 340, 331, 290,
	291, 0, 0, 0, 0, 0, 0, 306, 310, 321,
	312, 300, 0, 0, 0, 0, 0, 0, 0, 587,
	0, 288, 0, 313, 0, 0, 0, 304, 0, 278,
	0, 289, 322, 270, 329, 339, 301, 332, 299, 298,
	335, 70, 0, 0, 58, 328, 286, 53, 292, 342,
	78, 73, 65, 59, 60, 49, 0, 71, 56, 57,
	55, 68, 75, 76, 54, 83, 52, 82, 51, 67,
	74, 79, 66, 63, 50, 77, 64, 62, 274, 72,
	80, 84, 330, 282, 280, 281, 323, 0, 0, 326,
	81, 334, 325, 303, 336, 284, 295, 341, 296, 297,
	319, 276, 311, 69, 0, 287, 272, 293, 273, 285,
	305, 308, 283, 327, 338, 61, 307, 309, 324, 302,
	320, 279, 314, 317, 337, 0, 0, 0, 47, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 316, 333,
	294, 0, 0, 318, 271, 315, 0, 275, 277, 340,
	331, 290, 291, 0, 0, 0, 0, 0, 0, 306,
	310, 321, 312, 300, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 288, 0, 313, 0, 0, 0, 304,
	0, 278, 0, 289, 322, 270, 329, 339, 301, 332,
	299, 298, 335, 70, 0, 0, 58, 328, 286, 53,
	292, 342, 78, 73, 65, 59, 60, 49, 0, 71,
	56, 57, 55, 68, 75, 76, 54, 83, 52, 82,
	51, 67, 74, 79, 66, 63, 50, 77, 64, 62,
	274, 72, 80, 84, 330, 282, 280, 281, 323, 0,
	0, 326, 81, 334, 325, 303, 336, 284, 295, 341,
	296, 297, 319, 276, 311, 69, 0, 287, 272, 293,
	273, 285, 305, 308, 283, 327, 338, 61, 307, 309,
	324, 302, 320, 279, 314, 317, 337, 0, 0, 0,
	190, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	316, 333, 294, 0, 0, 318, 271, 315, 0, 275,
	277, 340, 331, 290, 291, 0, 0, 0, 0, 0,
	0, 306, 310, 321, 312, 300, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 288, 0, 313, 0, 0,
	0, 304, 0, 278, 0, 289, 322, 270, 329, 339,
	301, 332, 299, 298, 335, 70, 0, 0, 58, 328,
	286, 53, 292, 342, 78, 73, 65, 59, 60, 49,
	0, 71, 56, 57, 55, 68, 75, 76, 54, 83,
	52, 82, 51, 67, 74, 79, 66, 63, 50, 77,
	64, 62, 274, 72, 80, 84, 330, 282, 280, 281,
	323, 0, 0, 326, 81, 334, 325, 303, 336, 284,
	295, 341, 296, 297, 319, 276, 311, 69, 0, 287,
	272, 293, 273, 285, 305, 308, 283, 327, 338, 61,
	307, 309, 324, 302, 320, 279, 314, 317, 337, 0,
	0, 0, 97, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 316, 333, 294, 0, 0, 318, 271, 315,
	0, 275, 277, 340, 331, 290, 291, 0, 0, 0,
	0, 0, 0, 306, 310, 321, 312, 300, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 288, 0, 313,
	0, 0, 0, 304, 0, 278, 0, 289, 322, 270,
	329, 339, 301, 332, 299, 298, 335, 70, 0, 0,
	58, 328, 286, 53, 292, 342, 78, 73, 65, 59,
	60, 49, 0, 71, 56, 57, 55, 68, 75, 76,
	54, 83, 52, 82, 51, 67, 74, 79, 66, 63,
	50, 77, 64, 62, 274, 72, 80, 84, 330, 282,
	280, 281, 323, 0, 0, 326, 81, 69, 0, 523,
	0, 151, 0, 0, 0, 0, 0, 0, 183, 61,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 29,
	0, 0, 190, 167, 166, 168, 169, 170, 171, 172,
	0, 0, 173, 174, 175, 0, 0, 0, 0, 149,
	160, 0, 182, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 157, 158, 345, 0, 0, 0, 188,
	0, 159, 0, 161, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 187, 0, 70, 0, 0,
	58, 0, 0, 53, 0, 0, 78, 73, 65, 59,
	60, 49, 0, 71, 56, 57, 55, 68, 75, 76,
	54, 83, 52, 82, 51, 67, 74, 79, 66, 63,
	50, 77, 64, 62, 0, 72, 80, 84, 0, 184,
	185, 186, 189, 180, 181, 69, 81, 0, 0, 151,
	0, 0, 0, 0, 0, 0, 183, 61, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 29, 0, 0,
	190, 167, 166, 168, 169, 170, 171, 172, 0, 0,
	173, 174, 175, 0, 0, 0, 0, 149, 160, 0,
	182, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 157, 158, 345, 0, 0, 0, 188, 0, 159,
	0, 161, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 187, 0, 70, 0, 0, 58, 0,
	0, 53, 0, 0, 78, 73, 65, 59, 60, 49,
	0, 71, 56, 57, 55, 68, 75, 76, 54, 83,
	52, 82, 51, 67, 74, 79, 66, 63, 50, 77,
	64, 62, 0, 72, 80, 84, 0, 184, 185, 186,
	189, 180, 181, 69, 81, 0, 0, 151, 0, 0,
	0, 0, 0, 0, 183, 61, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 29, 0, 145, 190, 167,
	166, 168, 169, 170, 171, 172, 0, 0, 173, 174,
	175, 0, 0, 0, 0, 149, 160, 0, 182, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 157,
	158, 0, 0, 0, 0, 188, 0, 159, 0, 161,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 187, 0, 70, 0, 0, 58, 0, 0, 53,
	0, 0, 78, 73, 65, 59, 60, 49, 0, 71,
	56, 57, 55, 68, 75, 76, 54, 83, 52, 82,
	51, 67, 74, 79, 66, 63, 50, 77, 64, 62,
	25, 72, 80, 84, 0, 184, 185, 186, 189, 180,
	181, 69, 81, 0, 0, 151, 0, 0, 0, 0,
	0, 0, 183, 61, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 29, 0, 0, 190, 167, 166, 168,
	169, 170, 171, 172, 0, 0, 173, 174, 175, 0,
	0, 0, 0, 149, 160, 0, 182, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 157, 158, 0,
	0, 0, 0, 188, 0, 159, 0, 161, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 187,
	0, 70, 0, 0, 58, 0, 0, 53, 0, 0,
	78, 73, 65, 59, 60, 49, 0, 71, 56, 57,
	55, 68, 75, 76, 54, 83, 52, 82, 51, 67,
	74, 79, 66, 63, 50, 77, 64, 62, 0, 72,
	80, 84, 0, 184, 185, 186, 189, 180, 181, 69,
	81, 0, 0, 151, 0, 0, 0, 0, 0, 0,
	183, 61, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 29, 0, 0, 190, 167, 166, 168, 169, 170,
	171, 172, 0, 0, 173, 174, 175, 0, 0, 0,
	0, 149, 160, 0, 182, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 157, 158, 0, 0, 0,
	0, 188, 0, 159, 0, 161, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 187, 0, 70,
	0, 0, 58, 0, 0, 53, 0, 0, 78, 73,
	65, 59, 60, 49, 0, 71, 56, 57, 55, 68,
	75, 76, 54, 83, 52, 82, 51, 67, 74, 79,
	66, 63, 50, 77, 64, 62, 0, 72, 80, 84,
	69, 184, 185, 186, 189, 180, 181, 0, 81, 0,
	0, 183, 61, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 29, 0, 0, 190, 167, 166, 168, 169,
	170, 171, 172, 0, 0, 173, 174, 175, 0, 0,
	0, 0, 0, 160, 0, 182, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 157, 158, 0, 0,
	0, 0, 188, 0, 159, 0, 161, 0, 0, 0,
	69, 0, 0, 0, 0, 0, 0, 0, 187, 0,
	70, 0, 61, 58, 0, 0, 53, 0, 0, 78,
	73, 65, 59, 60, 49, 47, 71, 56, 57, 55,
	68, 75, 76, 54, 83, 52, 82, 51, 67, 74,
	79, 66, 63, 50, 77, 64, 62, 0, 72, 80,
	84, 0, 184, 185, 186, 189, 180, 181, 0, 81,
	0, 0, 362, 361, 371, 372, 364, 365, 366, 367,
	368, 369, 370, 363, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	70, 0, 0, 58, 0, 0, 53, 0, 0, 78,
	73, 65, 59, 60, 49, 0, 71, 56, 57, 55,
	68, 75, 76, 54, 83, 52, 82, 51, 67, 74,
	79, 66, 63, 50, 77, 64, 62, 0, 72, 80,
	84, 0, 69, 0, 0, 0, 0, 0, 0, 81,
	450, 0, 0, 0, 61, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 47, 0, 127,
	0, 0, 25, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 69, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 61, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 29, 0, 0, 47, 0,
	127, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 449, 0, 0,
	0, 447, 446, 0, 0, 58, 0, 0, 53, 0,
	0, 78, 73, 65, 59, 60, 49, 0, 71, 56,
	57, 55, 68, 75, 76, 54, 83, 52, 82, 51,
	67, 74, 79, 66, 63, 50, 77, 64, 62, 0,
	72, 80, 84, 70, 0, 0, 58, 0, 0, 53,
	0, 81, 78, 73, 65, 59, 60, 49, 0, 71,
	56, 57, 55, 68, 75, 76, 54, 83, 52, 82,
	51, 67, 74, 79, 66, 63, 50, 77, 64, 62,
	25, 72, 80, 84, 0, 0, 0, 0, 0, 0,
	0, 69, 81, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 61, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 29, 0, 0, 97, 0, 96, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 69,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 61, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 47, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 70, 0, 0, 58, 0, 0, 53, 0, 0,
	78, 73, 65, 59, 60, 49, 0, 71, 56, 57,
	55, 68, 75, 76, 54, 83, 52, 82, 51, 67,
	74, 79, 66, 63, 50, 77, 64, 62, 0, 72,
	80, 84, 44, 43, 0, 0, 0, 0, 45, 70,
	81, 0, 58, 0, 0, 53, 0, 0, 78, 73,
	65, 59, 60, 49, 0, 71, 56, 57, 55, 68,
	75, 76, 54, 83, 52, 82, 51, 67, 74, 79,
	66, 63, 50, 77, 64, 62, 0, 72, 80, 84,
	69, 0, 0, 0, 0, 0, 0, 0, 81, 0,
	0, 0, 61, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 29, 0, 0, 97, 0, 96, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 69, 0, 0, 218, 0, 0, 0, 0, 0,
	0, 0, 0, 61, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 97, 0, 96, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	70, 0, 0, 58, 0, 0, 53, 0, 0, 78,
	73, 65, 59, 60, 49, 0, 71, 56, 57, 55,
	68, 75, 76, 54, 83, 52, 82, 51, 67, 74,
	79, 66, 63, 50, 77, 64, 62, 0, 72, 80,
	84, 70, 0, 0, 58, 0, 0, 53, 0, 81,
	78, 73, 65, 59, 60, 49, 0, 71, 56, 57,
	55, 68, 75, 76, 54, 83, 52, 82, 51, 67,
	74, 79, 66, 63, 50, 77, 64, 62, 0, 72,
	80, 84, 69, 0, 0, 0, 0, 0, 0, 198,
	81, 0, 0, 0, 61, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 0, 96,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 69, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 61, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 47, 0,
	127, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 70, 0, 0, 58, 0, 0, 53, 0,
	0, 78, 73, 65, 59, 60, 49, 0, 71, 56,
	57, 55, 68, 75, 76, 54, 83, 52, 82, 51,
	67, 74, 79, 66, 63, 50, 77, 64, 62, 0,
	72, 80, 84, 70, 0, 0, 58, 0, 0, 53,
	0, 81, 78, 73, 65, 59, 60, 49, 0, 71,
	56, 57, 55, 68, 75, 76, 54, 83, 52, 82,
	51, 67, 74, 79, 66, 63, 50, 77, 64, 62,
	0, 72, 80, 84, 69, 0, 0, 0, 0, 0,
	0, 0, 81, 0, 0, 0, 61, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 190,
	0, 417, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 69, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 61, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	97, 0, 96, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 70, 0, 0, 58, 0, 0,
	53, 0, 0, 78, 73, 65, 59, 60, 49, 0,
	71, 56, 57, 55, 68, 75, 76, 54, 83, 52,
	82, 51, 67, 74, 79, 66, 63, 50, 77, 64,
	62, 0, 72, 80, 84, 70, 0, 0, 58, 0,
	0, 53, 0, 81, 78, 73, 65, 59, 60, 49,
	0, 71, 56, 57, 55, 68, 75, 76, 54, 83,
	52, 82, 51, 67, 74, 79, 66, 63, 50, 77,
	64, 62, 0, 72, 80, 84, 69, 0, 0, 0,
	0, 0, 0, 0, 81, 0, 0, 0, 61, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 47, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 69, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 61,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 97, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 70, 0, 0, 58,
	0, 0, 53, 0, 0, 78, 73, 65, 59, 60,
	49, 0, 71, 56, 57, 55, 68, 75, 76, 54,
	83, 52, 82, 51, 67, 74, 79, 66, 63, 50,
	77, 64, 62, 0, 72, 80, 84, 70, 0, 0,
	58, 0, 0, 53, 0, 81, 78, 73, 65, 59,
	60, 49, 0, 71, 56, 57, 55, 68, 75, 76,
	54, 83, 52, 82, 51, 67, 74, 79, 66, 63,
	50, 77, 64, 62, 0, 72, 80, 84, 0, 0,
	0, 0, 0, 0, 0, 0, 81,
}
var yyPact = [...]int{

	65, -1000, -112, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 467, 497, -1000, -1000, -1000, 366, 3592, 5,
	-21, 30, 4108, 4108, -1000, -1000, 380, 116, -1000, -1000,
	-1000, -1000, 451, 464, 380, 445, -27, -1000, 3723, 489,
	-1000, 3936, -22, -10, -36, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 4108, -29, -29, -13, 486,
	4108, -5, -1000, -1000, -1000, 50, -1000, -1000, -1000, -1000,
	-1000, 443, 212, -103, -1000, 3022, 3022, 467, -1000, 380,
	-1000, 3895, -1000, 127, 260, 442, -1000, -1000, -1000, 440,
	3544, 3764, 4108, 343, -1000, 959, -1000, -1000, -36, -36,
	4108, 104, -15, 4108, 438, 4108, 4108, -18, -1000, -1000,
	485, 2330, 2608, -1000, -1000, -1000, -1000, 246, -1000, 3022,
	1084, 284, -1000, -1000, -1000, -1000, -1000, 3153, 3153, 3153,
	3153, 3153, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 284, 39, -1000, 2884,
	284, 284, 3022, 284, -1000, -1000, -1000, 284, 284, 284,
	-1000, -1000, 352, -1000, 163, 451, 212, 370, 4108, -1000,
	-1000, 4067, 3723, 3723, 3723, 3723, -1000, 418, 417, 396,
	408, 4280, -1000, 314, 212, 3544, -1000, -1000, 4108, -1000,
	483, 1418, 3365, 112, -93, -1000, -1000, 357, -1000, 357,
	357, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	357, 357, 357, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	363, 363, 363, 360, 360, 4108, 4108, -1000, 437, -41,
	-33, -1000, -1000, -1000, -1000, 4108, 4108, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 384, -1000, -1000, 886, 35, 3022, 3022,
	283, 3022, 3022, 51, 3153, 192, 107, 3153, 3153, 3153,
	3153, 3153, 3153, 3153, 3153, 3153, 3153, 3153, 3153, 3153,
	3153, 3153, 3153, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 380, -1000, -1000, -1000, -1000, 3233, 2470, 2178, 310,
	157, 2884, 3022, 443, 83, 157, 4067, 2608, 2608, 2608,
	3022, -1000, -1000, -1000, -1000, -1000, -1000, 4067, 284, -1000,
	3406, -1000, 378, -1000, 40, -1000, 34, -1000, 442, 391,
	342, -1000, -1000, -1000, -1000, 411, -1000, -1000, -1000, -1000,
	-1000, 212, -1000, 467, 3022, 350, 1266, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 362, 429, 64, 202, -1000,
	-1000, 423, -1000, 122, -97, -1000, -1000, 166, -1000, -1000,
	-1000, -1000, -1000, -1000, 165, -1000, -1000, -1000, 164, -1000,
	371, 372, -1000, 3936, -1000, 4108, 4067, -1000, -1000, 483,
	2608, 3723, -1000, -1000, 3936, 1874, 51, 99, -1000, -1000,
	237, -1000, -1000, 157, 157, 281, -1000, -1000, -1000, -1000,
	192, 3153, 3153, 3153, 3153, 13, 281, 281, 226, 108,
	800, -1000, 28, 28, 20, 20, 20, 20, 20, 66,
	66, -1000, 212, 2608, 348, 284, 32, -1000, 3022, -1000,
	268, 2608, 137, -1000, 3022, 212, 291, 291, 291, -1000,
	293, 262, -1000, -1000, 2746, 212, 308, -1000, 26, 467,
	4067, 3022, 2178, -1000, -1000, 3022, 361, -1000, -1000, -1000,
	451, 157, 1418, -1000, 1418, 4239, -1000, 195, -1000, -1000,
	-89, 16, -1000, -1000, -1000, 227, 287, 299, 4108, 4108,
	-1000, -1000, -25, 481, -1000, 278, -1000, -1000, 17, -1000,
	-1000, -1000, -1000, 13, 281, 281, 190, -1000, 3153, 3153,
	-1000, 291, 2608, 2026, 157, 723, 367, 69, -1000, 3022,
	168, -1000, -1000, -1000, -1000, 284, -1000, -1000, 346, 3936,
	4239, 451, -1000, 157, -1000, 15, 157, 3936, -1000, 1266,
	-1000, 258, -1000, 357, -1000, 41, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 162, -1000, 156, 1570, 284, 4067, 474,
	446, 1722, -1000, 3153, 281, 281, -1000, 212, -1000, 212,
	357, -1000, 357, 360, 357, -55, 357, -56, 357, 357,
	357, 357, 357, 357, -1000, -109, -1000, 157, 3022, -1000,
	284, -1000, 380, -1000, 14, -1000, -1000, 2026, 199, -1000,
	-1000, 4239, -1000, -1000, 427, -1000, 426, 224, 218, -1000,
	-1000, -1000, 1570, -1000, -1000, 3022, 3022, -1000, 281, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 212, 174, 157, 262, 212, 4239,
	-1000, 3936, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 157,
	245, -1000, -1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 668, 29, 431, 667, 665, 664, 663, 661, 659,
	646, 645, 644, 641, 638, 490, 637, 635, 633, 38,
	631, 15, 138, 10, 27, 63, 629, 18, 59, 43,
	624, 32, 623, 617, 47, 614, 334, 611, 607, 21,
	605, 603, 602, 599, 597, 616, 596, 595, 594, 593,
	588, 22, 1, 8, 26, 9, 585, 612, 7, 581,
	568, 20, 564, 562, 558, 556, 11, 554, 35, 552,
	28, 550, 548, 34, 16, 547, 145, 58, 546, 17,
	0, 6, 2, 12, 545, 660, 33, 36, 544, 543,
	3, 542, 541, 540, 539, 535, 534, 531, 52, 530,
	529, 528, 44, 5, 526, 525, 524, 31, 521, 41,
	520, 518, 517, 14, 13, 515, 4, 514, 40, 512,
	511, 510, 140, 37, 509, 504,
}
var yyR1 = [...]int{

	0, 120, 121, 121, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 3, 3, 4, 4, 5,
	5, 6, 6, 18, 18, 18, 7, 8, 9, 9,
	9, 12, 110, 111, 111, 111, 107, 92, 92, 92,
	95, 95, 93, 93, 93, 93, 93, 93, 94, 94,
	94, 94, 94, 96, 96, 96, 96, 96, 97, 97,
	97, 97, 97, 97, 97, 97, 97, 97, 98, 98,
	102, 102, 103, 103, 103, 100, 100, 101, 101, 104,
	104, 104, 99, 99, 99, 99, 99, 99, 105, 105,
	106, 106, 106, 106, 106, 108, 115, 115, 115, 115,
	109, 109, 117, 117, 116, 112, 112, 112, 113, 113,
	113, 114, 114, 114, 10, 10, 10, 118, 118, 11,
	11, 13, 13, 13, 13, 13, 119, 119, 14, 14,
	14, 125, 15, 16, 16, 17, 17, 19, 19, 23,
	23, 22, 22, 24, 24, 24, 24, 84, 84, 84,
	83, 83, 26, 27, 27, 28, 28, 29, 29, 29,
	29, 38, 72, 72, 30, 30, 30, 31, 31, 32,
	32, 89, 89, 88, 88, 88, 87, 87, 33, 33,
	33, 34, 34, 35, 35, 37, 37, 36, 36, 39,
	39, 25, 25, 25, 25, 25, 25, 41, 41, 40,
	40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
	40, 50, 50, 50, 50, 50, 50, 42, 42, 42,
	42, 42, 42, 42, 21, 21, 51, 51, 51, 57,
	52, 52, 45, 45, 45, 45, 45, 45, 45, 45,
	45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
	45, 45, 45, 45, 45, 45, 45, 45, 48, 48,
	48, 46, 46, 46, 46, 47, 47, 47, 49, 49,
	49, 91, 91, 91, 91, 91, 91, 91, 91, 91,
	91, 91, 91, 91, 91, 91, 91, 91, 62, 62,
	20, 20, 60, 60, 61, 63, 63, 58, 58, 58,
	59, 59, 59, 44, 44, 44, 44, 44, 44, 44,
	44, 64, 64, 65, 65, 66, 66, 67, 67, 68,
	69, 69, 69, 70, 70, 70, 70, 43, 43, 43,
	43, 43, 43, 71, 71, 71, 71, 53, 53, 55,
	55, 54, 56, 73, 73, 74, 76, 76, 77, 77,
	75, 75, 78, 78, 78, 81, 81, 82, 82, 85,
	85, 86, 86, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 80, 80, 80, 80,
	80, 80, 80, 80, 80, 80, 80, 80, 80, 80,
	80, 80, 80, 80, 80, 80, 80, 80, 80, 80,
	80, 80, 80, 80, 80, 80, 80, 80, 80, 80,
	80, 80, 122, 123, 124, 90, 90, 90,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 5, 8, 4, 1, 3, 1,
	3, 5, 6, 1, 1, 3, 8, 7, 2, 8,
	9, 4, 4, 1, 3, 3, 6, 3, 1, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 2, 2, 1, 2, 2, 2, 1, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 3,
	0, 5, 0, 3, 5, 0, 1, 0, 1, 0,
	1, 2, 0, 2, 2, 2, 2, 2, 0, 1,
	0, 2, 1, 2, 1, 4, 2, 3, 2, 2,
	1, 1, 1, 3, 2, 0, 1, 3, 1, 2,
	3, 1, 1, 1, 6, 6, 8, 0, 1, 4,
	4, 4, 5, 3, 3, 5, 0, 1, 2, 2,
	2, 0, 2, 0, 2, 1, 2, 0, 1, 0,
	1, 1, 3, 1, 2, 3, 5, 0, 1, 2,
	1, 1, 2, 1, 3, 1, 1, 1, 1, 3,
	3, 2, 1, 3, 4, 4, 3, 2, 4, 0,
	1, 0, 1, 0, 1, 2, 1, 1, 1, 2,
	2, 2, 3, 2, 2, 2, 1, 1, 3, 0,
	2, 1, 3, 3, 2, 3, 1, 1, 1, 3,
	3, 4, 4, 5, 3, 4, 3, 4, 5, 6,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 0, 2, 1, 1, 1, 3,
	1, 3, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 2, 2, 3, 1, 1, 1, 1, 4, 5,
	6, 6, 7, 5, 4, 1, 1, 1, 4, 4,
	4, 2, 1, 2, 2, 2, 1, 2, 2, 1,
	2, 2, 2, 2, 2, 2, 2, 1, 0, 1,
	0, 2, 1, 2, 4, 0, 2, 1, 3, 5,
	1, 3, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 3, 0, 2, 0, 3, 1, 3, 2,
	0, 1, 1, 0, 2, 4, 4, 2, 1, 3,
	5, 4, 6, 1, 3, 3, 5, 1, 3, 1,
	2, 3, 1, 1, 3, 3, 0, 2, 0, 3,
	0, 1, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -120, -1, -2, -6, -7, -8, -9, -10, -11,
	-13, -14, -3, -4, -18, 8, 9, -12, 95, 96,
	97, 111, 23, 112, 115, 6, -122, 7, 152, 39,
	-121, 157, -66, 14, -17, 5, -15, -125, -15, -15,
	-110, 39, -78, 101, 100, 106, -81, 42, -80, 121,
	140, 134, 132, 113, 130, 126, 124, 125, 110, 119,
	120, 29, 143, 139, 142, 118, 138, 135, 127, 17,
	107, 123, 145, 117, 136, 128, 129, 141, 116, 137,
	146, 156, 133, 131, 147, 100, 100, 102, 95, 102,
	100, -119, 55, -36, -87, -85, 44, 42, -80, -36,
	-124, -15, -2, 57, -70, 16, 15, -5, -3, -122,
	18, -75, 104, -16, -27, -28, -29, -30, -38, -57,
	-122, -36, 10, -111, -107, -83, -81, 44, 102, 100,
	-77, 105, -36, -76, 105, -76, 100, 10, -36, 148,
	56, 94, -19, 19, -123, 41, 152, -25, -40, 59,
	-45, 21, -44, -41, -59, -56, -57, 83, 84, 91,
	60, 93, -48, -46, -47, -49, 44, 43, 45, 46,
	47, 48, 49, 52, 53, 54, -81, -85, -54, -122,
	153, 154, 62, 28, 149, 150, 151, 105, 89, 152,
	42, -80, -67, -68, -25, -66, -2, -37, 24, -36,
	51, 27, 40, -33, -34, -35, 30, 33, 35, 31,
	36, -89, 20, -27, -2, -122, -88, -87, 20, -85,
	-36, 41, 40, -92, -95, -97, -96, -93, -94, 132,
	133, 136, 137, 138, 139, 140, 141, 142, 143, 113,
	128, 129, 130, 131, 116, 117, 118, 119, 120, 121,
	123, 124, 125, 126, 127, -77, -77, -36, 59, 99,
	98, -36, 21, -36, -36, 100, 10, -86, -85, -79,
	99, 58, 20, 22, 144, 61, 15, 62, 95, 35,
	150, 151, 149, 26, 9, 23, 112, 19, 87, 97,
	65, 66, 114, 21, 54, 10, 12, 13, 105, 104,
	77, 102, 33, 7, 93, 24, 73, 30, 25, 31,
	74, 16, 76, 89, 36, 59, 52, 37, 57, 14,
	34, 75, 98, 152, 32, 6, 155, 27, 111, 100,
	148, 64, 103, 53, 5, 106, 8, 38, 28, 101,
	63, 11, 115, -22, -24, 85, -25, -85, 58, 57,
	73, 40, 17, -25, -42, 77, 59, 74, 75, 76,
	61, 80, 79, 90, 83, 84, 85, 86, 87, 88,
	89, 81, 82, 67, 68, 69, 70, 71, 72, 78,
	-57, -122, -45, -45, -45, -45, -45, -122, 94, -52,
	-25, -122, -122, -122, -62, -25, -122, -122, -122, -122,
	40, -69, 22, 23, -70, -123, -43, 27, 28, -2,
	-122, -36, -73, -74, -58, -83, -87, 44, -28, -29,
	-28, -29, 30, 30, 30, 34, 30, -34, -85, -123,
	-123, -2, -87, -39, 11, -112, -113, -114, -82, 44,
	45, -81, -79, -107, -108, -115, 107, 106, -109, 102,
	25, -104, 52, 59, -100, 146, -98, 39, -98, -98,
	-98, -98, -98, -102, 39, -102, -102, -103, 39, -103,
	-36, -36, 21, -118, 108, 103, -118, -36, -36, -26,
	40, 10, -84, -83, 20, 94, -25, -25, -50, 52,
	59, 53, 54, -25, -25, -45, -51, -54, -57, 50,
	77, 74, 75, 76, 61, -45, -45, -45, -45, -45,
	-45, -45, -45, -45, -45, -45, -45, -45, -45, -45,
	-45, -81, -23, 19, -22, -82, -86, -79, 40, -123,
	-25, -19, -60, -61, 63, -58, -22, -22, -22, -68,
	-73, -53, -55, -54, -122, -2, -71, -83, -81, -39,
	40, 67, 94, -32, -31, 37, 38, -31, 30, -123,
	-66, -25, 40, -114, 67, 39, 25, -109, 42, 42,
	-99, 26, 52, -101, 147, 45, 45, 45, 37, 38,
	-107, -36, -58, -39, -24, -27, -83, 85, -86, 52,
	53, 54, -51, -45, -45, -45, -45, -21, 114, 58,
	-123, -22, -122, 94, -25, 20, -22, -63, -61, 65,
	-25, -123, -123, -123, -123, 40, -123, -123, -123, 40,
	94, -66, -74, -25, -82, -86, -25, 39, -70, -113,
	-114, -117, -116, -81, 42, -105, 144, 44, 45, 46,
	52, 149, 41, 40, 41, 40, -36, -36, 103, -64,
	12, 94, -21, 58, -45, -45, -123, -23, -82, -91,
	132, 113, 130, 126, 135, 145, 128, 146, 129, 119,
	116, 117, 118, 121, 44, -66, 66, -25, 64, -55,
	28, -2, -122, -83, -81, -81, -70, 94, -72, -83,
	41, 40, -98, -106, 107, 25, 106, 45, 45, -90,
	-122, -82, -55, -58, -65, 13, 15, 85, -45, -123,
	-123, -98, -98, -103, -98, 120, -98, 120, -98, -98,
	-98, -98, -98, -98, -20, 155, -25, -53, -2, 94,
	-82, 40, 41, -116, 25, 25, 41, 41, -90, -25,
	-52, -123, 44, -123, -81, -83,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 315, 0, 131, 131, 131, 0, 352, 0,
	0, 126, 0, 0, 474, 131, 0, 23, 24, 472,
	1, 3, 323, 0, 0, 135, 350, 133, 0, 0,
	28, 0, 0, 0, 348, 353, 354, 355, 356, 436,
	437, 438, 439, 440, 441, 442, 443, 444, 445, 446,
	447, 448, 449, 450, 451, 452, 453, 454, 455, 456,
	457, 458, 459, 460, 461, 462, 463, 464, 465, 466,
	467, 468, 469, 470, 471, 0, 346, 346, 0, 0,
	0, 0, 127, 128, 187, 176, 177, 359, 360, 129,
	130, 137, 17, 0, 13, 0, 0, 315, 19, 0,
	136, 0, 351, 132, 0, 153, 155, 156, 157, -2,
	0, 173, 0, 0, 33, 0, 150, 151, 348, 348,
	0, 0, 0, 0, 0, 0, 0, 0, 123, 124,
	0, 0, 0, 138, 18, 473, 25, 324, 191, 0,
	196, 0, 232, 233, 234, 235, 236, 0, 0, 0,
	0, 0, 254, 255, 256, 257, 303, 304, 305, 306,
	307, 308, 309, 310, 197, 198, 300, 0, 342, 0,
	0, 0, 288, 0, 265, 266, 267, 0, 0, 0,
	-2, -2, 316, 317, 320, 323, 17, 0, 0, 186,
	134, 0, 0, 0, 0, 0, 178, 0, 0, 0,
	0, 0, 172, 0, 17, 0, 161, 174, 0, 176,
	189, 105, 0, 79, 75, 38, 39, 68, 41, 68,
	68, 60, 61, 62, 63, 64, 65, 66, 67, 53,
	68, 68, 68, 57, 42, 43, 44, 45, 46, 47,
	70, 70, 70, 72, 72, 0, 0, 31, 0, 117,
	117, 119, 347, 120, 121, 0, 0, 188, 361, 362,
	363, 364, 365, 366, 367, 368, 369, 370, 371, 372,
	373, 374, 375, 376, 377, 378, 379, 380, 381, 382,
	383, 384, 385, 386, 387, 388, 389, 390, 391, 392,
	393, 394, 395, 396, 397, 398, 399, 400, 401, 402,
	403, 404, 405, 406, 407, 408, 409, 410, 411, 412,
	413, 414, 415, 416, 417, 418, 419, 420, 421, 422,
	423, 424, 425, 426, 427, 428, 429, 430, 431, 432,
	433, 434, 435, 16, 141, 143, 147, 0, 0, 0,
	0, 0, 0, 194, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 217, 218, 219, 220, 221, 222, 223,
	210, 0, 249, 250, 251, 252, 0, 139, 0, 0,
	230, 0, 0, 137, 0, 289, 0, 0, 0, 0,
	0, 319, 321, 322, 14, 20, 21, 0, 0, -2,
	0, 185, 189, 343, 0, 297, 0, -2, 154, 169,
	0, 166, 179, 180, 181, 0, 183, 184, 159, 160,
	229, 17, 175, 315, 0, 32, 106, 108, 111, 112,
	113, 357, 358, 34, 35, 0, 457, 0, 0, 100,
	101, 82, 80, 0, 77, 76, 40, 0, 58, 59,
	54, 55, 56, 48, 0, 49, 50, 51, 0, 52,
	0, 0, 349, 0, 118, 0, 0, 122, 125, 189,
	0, 0, 144, 148, 0, 0, 192, 193, 195, 211,
	0, 213, 215, 325, 326, 199, 200, 226, 227, 228,
	0, 0, 0, 0, 0, 224, 204, 206, 0, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 246, 247,
	248, 253, 0, 0, 140, 301, 0, -2, 0, 341,
	0, 0, 295, 292, 0, 0, 0, 0, 0, 318,
	22, 327, 337, 339, 0, 17, 0, 333, 150, 315,
	0, 0, 0, 164, 170, 0, 0, 165, 182, -2,
	323, 190, 0, 109, 0, 0, 96, 0, 98, 99,
	88, 0, 81, 37, 78, 0, 0, 0, 0, 0,
	114, 115, 0, 311, 142, 152, 149, 145, 0, 212,
	214, 216, 201, 224, 205, 207, 0, 202, 0, 0,
	258, 0, 139, 0, 231, 0, 315, 0, 293, 0,
	0, 264, 268, 269, 270, 0, 340, -2, 0, 0,
	0, 323, 344, 345, 298, 0, 167, 0, 27, 107,
	110, 0, 102, 68, 97, 90, 89, 83, 84, 85,
	86, 87, 69, 0, 73, 0, 475, 0, 0, 313,
	0, 0, 203, 0, 225, 208, 259, 0, 302, 0,
	68, 272, 68, 72, 68, 276, 68, 279, 68, 68,
	68, 68, 68, 68, 287, 290, 263, 296, 0, 338,
	0, -2, 0, 335, 150, 334, 26, 0, 0, 162,
	95, 0, 104, 36, 0, 92, 94, 0, 0, 29,
	476, 477, 475, 116, 15, 0, 0, 146, 209, 260,
	261, 271, 273, 274, 275, 277, 278, 280, 281, 282,
	283, 284, 285, 286, 0, 0, 294, 330, 17, 0,
	299, 0, 168, 103, 91, 93, 71, 74, 30, 314,
	312, 262, 291, -2, 336, 163,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 60, 3, 3, 3, 88, 80, 3,
	39, 41, 85, 83, 40, 84, 94, 86, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 157,
	68, 67, 69, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 90, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 79, 3, 91,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 42, 43, 44,
	45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
	55, 56, 57, 58, 59, 61, 62, 63, 64, 65,
	66, 70, 71, 72, 73, 74, 75, 76, 77, 78,
	81, 82, 87, 89, 92, 93, 95, 96, 97, 98,
	99, 100, 101, 102, 103, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:243
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:248
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:249
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:253
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 13:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:267
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			yyVAL.selStmt = sel
		}
	case 14:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:274
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit}
		}
	case 15:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:281
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Distinct: yyDollar[3].str, SelectExprs: yyDollar[4].selectExprs, From: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), GroupBy: GroupBy(yyDollar[7].exprs), Having: NewWhere(HavingStr, yyDollar[8].expr)}
		}
	case 16:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:285
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Distinct: yyDollar[3].str, SelectExprs: yyDollar[4].selectExprs}
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:291
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 18:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:295
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:301
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 20:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:305
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 21:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:312
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[5].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			yyVAL.statement = ins
		}
	case 22:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:322
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[6].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}}
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:334
		{
			yyVAL.str = InsertStr
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:338
		{
			yyVAL.str = ReplaceStr
		}
	case 25:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:342
		{
			yyVAL.str = ReplaceStr
		}
	case 26:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:348
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 27:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:354
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 28:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:360
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 29:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:365
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: CreateIndexStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 30:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:370
		{
			var exists bool
			if yyDollar[4].empty != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: CreateVirtualTableStr, IfExists: exists, Table: yyDollar[5].tableName, NewName: yyDollar[7].tableName}
		}
	case 31:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:380
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 32:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:387
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:394
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:399
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:403
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 36:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:409
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[5].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[6].colKeyOpt
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:418
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 40:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:428
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:433
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:439
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:443
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:447
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:451
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:455
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:459
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 48:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:465
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:471
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 50:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:477
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 51:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:483
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:489
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:497
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:501
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:505
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:509
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:513
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:519
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:523
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:527
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:531
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:535
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:539
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:543
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:547
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:551
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:555
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:560
		{
			yyVAL.optVal = nil
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:564
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:569
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 71:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:573
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:581
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:585
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 74:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:591
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 75:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:599
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:603
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 77:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:608
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:612
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 79:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:618
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:622
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:626
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 82:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:631
		{
			yyVAL.optVal = nil
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:635
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:639
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:643
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:647
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:651
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 88:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:656
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:660
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 90:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:665
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:669
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:673
		{
			yyVAL.colKeyOpt = colKey
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:677
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:681
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 95:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:687
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:693
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:697
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:701
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:705
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:711
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:715
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:721
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:725
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:731
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 105:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:736
		{
			yyVAL.str = ""
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:740
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:744
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:752
		{
			yyVAL.str = yyDollar[1].str
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:756
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:760
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:766
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:770
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:774
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 114:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:780
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 115:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:784
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[6].tableName}
		}
	case 116:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:789
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 117:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:795
		{
		}
	case 119:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:799
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 120:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:807
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropIndexStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 121:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:817
		{
			yyVAL.statement = &Show{Type: string(yyDollar[3].bytes), ShowCreate: true, OnTable: yyDollar[4].tableName}
		}
	case 122:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:821
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[5].tableName}
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:825
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[3].tableName}
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:829
		{
			yyVAL.statement = &Show{Type: string(yyDollar[3].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:833
		{
			yyVAL.statement = &Show{Type: "table", OnTable: yyDollar[5].tableName}
		}
	case 126:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:838
		{
			yyVAL.bytes = nil
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:842
		{
			yyVAL.bytes = nil
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:848
		{
			yyVAL.statement = &Show{Type: "table", OnTable: yyDollar[2].tableName}
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:852
		{
			yyVAL.statement = &Show{Type: "table", OnTable: yyDollar[2].tableName}
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:856
		{
			yyVAL.statement = &Explain{}
		}
	case 131:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:861
		{
			setAllowComments(yylex, true)
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:865
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 133:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:871
		{
			yyVAL.bytes2 = nil
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:875
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:881
		{
			yyVAL.str = UnionStr
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:885
		{
			yyVAL.str = UnionAllStr
		}
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:890
		{
			yyVAL.str = ""
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:894
		{
			yyVAL.str = DistinctStr
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:899
		{
			yyVAL.selectExprs = nil
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:903
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:909
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:913
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:919
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:923
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:927
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 146:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:931
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 147:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:936
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:940
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:944
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:951
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:957
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:963
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:967
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:977
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:981
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery}
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:985
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:989
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:995
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent}
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1001
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1005
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 164:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1011
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 165:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1015
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1019
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1025
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 168:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1027
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 169:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1031
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1033
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 171:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1036
		{
			yyVAL.empty = struct{}{}
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1038
		{
			yyVAL.empty = struct{}{}
		}
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1041
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1045
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1049
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1056
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1062
		{
			yyVAL.str = JoinStr
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1066
		{
			yyVAL.str = InnerJoinStr
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1070
		{
			yyVAL.str = CrossJoinStr
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1076
		{
			yyVAL.str = LeftJoinStr
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1080
		{
			yyVAL.str = LeftJoinStr
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1086
		{
			yyVAL.str = NaturalJoinStr
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1090
		{
			yyVAL.str = NaturalLeftJoinStr
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1096
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1100
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1106
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1110
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 189:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1115
		{
			yyVAL.expr = nil
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1119
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1125
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1129
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1133
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1137
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1141
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1145
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1151
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1155
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1161
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1165
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 201:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1169
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 202:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1173
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 203:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1177
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1181
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 205:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1185
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1189
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: MatchStr, Right: yyDollar[3].expr}
		}
	case 207:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1193
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotMatchStr, Right: yyDollar[4].expr}
		}
	case 208:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1197
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 209:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1201
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1205
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1211
		{
			yyVAL.str = IsNullStr
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1215
		{
			yyVAL.str = IsNotNullStr
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1219
		{
			yyVAL.str = IsTrueStr
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1223
		{
			yyVAL.str = IsNotTrueStr
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1227
		{
			yyVAL.str = IsFalseStr
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1231
		{
			yyVAL.str = IsNotFalseStr
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1237
		{
			yyVAL.str = EqualStr
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1241
		{
			yyVAL.str = LessThanStr
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1245
		{
			yyVAL.str = GreaterThanStr
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1249
		{
			yyVAL.str = LessEqualStr
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1253
		{
			yyVAL.str = GreaterEqualStr
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1257
		{
			yyVAL.str = NotEqualStr
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1261
		{
			yyVAL.str = NullSafeNotEqualStr
		}
	case 224:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1266
		{
			yyVAL.expr = nil
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1270
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1276
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1280
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1284
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1290
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1296
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1300
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1306
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1310
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1314
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1318
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1322
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1326
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1330
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1334
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1338
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1342
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1346
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1350
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1354
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1358
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1362
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1366
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1370
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1374
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1382
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1396
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1400
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 253:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1404
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 258:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1422
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 259:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1426
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 260:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1430
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 261:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1440
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 262:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1444
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 263:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1448
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 264:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1452
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1462
		{
			yyVAL.expr = &TimeExpr{Expr: NewColIdent("current_timestamp")}
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1467
		{
			yyVAL.expr = &TimeExpr{Expr: NewColIdent("current_date")}
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1472
		{
			yyVAL.expr = &TimeExpr{Expr: NewColIdent("current_time")}
		}
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1482
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 269:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1486
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 270:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1490
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1496
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1500
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1504
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1508
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1514
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1518
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1522
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1526
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1530
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1534
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1538
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1542
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1546
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1550
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1554
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1558
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1562
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 288:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1567
		{
			yyVAL.expr = nil
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1571
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 290:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1576
		{
			yyVAL.str = string("")
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1580
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1586
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1590
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 294:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1596
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 295:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1601
		{
			yyVAL.expr = nil
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1605
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1611
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 298:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1615
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 299:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1619
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1625
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1629
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 302:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1633
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1639
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1643
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1647
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1651
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1655
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1659
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1663
		{
			yyVAL.expr = NewPosArg(yyDollar[1].bytes)
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1667
		{
			yyVAL.expr = &NullVal{}
		}
	case 311:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1672
		{
			yyVAL.exprs = nil
		}
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1676
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 313:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1681
		{
			yyVAL.expr = nil
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1685
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 315:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1690
		{
			yyVAL.orderBy = nil
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1694
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1700
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1704
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1710
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 320:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1715
		{
			yyVAL.str = AscScr
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1719
		{
			yyVAL.str = AscScr
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1723
		{
			yyVAL.str = DescScr
		}
	case 323:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1728
		{
			yyVAL.limit = nil
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1732
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 325:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1736
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 326:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1740
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1753
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1757
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1761
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 330:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1766
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 331:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1770
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 332:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1774
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1781
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1785
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 335:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1789
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 336:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1793
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1799
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1803
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1809
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1813
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1819
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1825
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1835
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1839
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1845
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 346:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1850
		{
			yyVAL.byt = 0
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1852
		{
			yyVAL.byt = 1
		}
	case 348:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1855
		{
			yyVAL.empty = struct{}{}
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1857
		{
			yyVAL.empty = struct{}{}
		}
	case 350:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1860
		{
			yyVAL.str = ""
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1862
		{
			yyVAL.str = IgnoreStr
		}
	case 352:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1865
		{
			yyVAL.empty = struct{}{}
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1867
		{
			yyVAL.empty = struct{}{}
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1869
		{
			yyVAL.empty = struct{}{}
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1873
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1877
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1884
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1890
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1894
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1901
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2036
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2045
		{
			decNesting(yylex)
		}
	case 474:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2050
		{
			forceEOF(yylex)
		}
	case 475:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2055
		{
			forceEOF(yylex)
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2059
		{
			forceEOF(yylex)
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2063
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
